(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{686:function(v,_,e){"use strict";e.r(_);var t=e(5),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("blockquote",[e("p",[v._v("参照：https://github.com/haizlin/fe-interview/blob/master/category/nodejs.md")])]),v._v(" "),e("ol",[e("li",[e("p",[e("strong",[v._v("NodeJs的特性主要有哪些？")]),v._v("\n单线程，单线程的好处，减少了内存开销与操作系统的内存换页。\n非阻塞I/O， 不会傻等I/O语句结束，而会执行后面的语句。\n事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("NodeJs适用于哪些场景开发？")])]),v._v(" "),e("p",[v._v("Nodejs适用于在高并发、I/O密集、少量业务逻辑的场景")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("你是怎么调试NodeJs呢？有哪些方法？")])]),v._v(" "),e("ol",[e("li",[v._v("使用VSCode")]),v._v(" "),e("li",[v._v("使用命令窗口 node debug xxx")]),v._v(" "),e("li",[v._v("使用浏览器 需要提前安装 node-inspector")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("你知道NodeJs是如何工作的吗？")])]),v._v(" "),e("p",[v._v("node的工作原理： node使用chrom的V8引擎来解释编译JS语言，将编译后的代码传递给"),e("strong",[v._v("libuv")]),v._v("，在libuv中进行区别是调用linux的libev/libio还是window的IOCP实现具体操作\n**node中"),e("u",[v._v("事件循环")]),v._v("工作原理：**node执行JS栈中的代码，发现宏任务将其放到对应的宏任务队列，微任务放到微任务队列。"),e("strong",[v._v("将JS栈中的代码执行完毕后，清空微任务队列，进入事件环，取出第一个宏任务进入"),e("u",[v._v("JS执行栈")]),v._v("执行。完毕后，清空微任务对列，进入宏任务取下一个，形成事件环")]),v._v("\n注意：process.nextTick微任务会在微任务队列中第一个执行")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("Node下的微任务，宏任务：")])]),v._v(" "),e("p",[e("strong",[v._v("在当前的微任务没有执行完成时，是不会执行下一个宏任务的。")])]),v._v(" "),e("p",[e("strong",[v._v("宏任务：")])]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("#")]),v._v(" "),e("th",[v._v("浏览器")]),v._v(" "),e("th",[v._v("Node")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[e("code",[v._v("I/O")])]),v._v(" "),e("td",[v._v("✅")]),v._v(" "),e("td",[v._v("✅")])]),v._v(" "),e("tr",[e("td",[e("code",[v._v("setTimeout")])]),v._v(" "),e("td",[v._v("✅")]),v._v(" "),e("td",[v._v("✅")])]),v._v(" "),e("tr",[e("td",[e("code",[v._v("setInterval")])]),v._v(" "),e("td",[v._v("✅")]),v._v(" "),e("td",[v._v("✅")])]),v._v(" "),e("tr",[e("td",[e("code",[v._v("setImmediate")])]),v._v(" "),e("td",[v._v("❌")]),v._v(" "),e("td",[v._v("✅")])]),v._v(" "),e("tr",[e("td",[e("code",[v._v("requestAnimationFrame")])]),v._v(" "),e("td",[v._v("✅")]),v._v(" "),e("td",[v._v("❌")])])])]),v._v(" "),e("p",[e("strong",[v._v("微任务：")])]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("#")]),v._v(" "),e("th",[v._v("浏览器")]),v._v(" "),e("th",[v._v("Node")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[e("code",[v._v("process.nextTick")])]),v._v(" "),e("td",[v._v("❌")]),v._v(" "),e("td",[v._v("✅")])]),v._v(" "),e("tr",[e("td",[e("code",[v._v("MutationObserver")])]),v._v(" "),e("td",[v._v("✅")]),v._v(" "),e("td",[v._v("❌")])]),v._v(" "),e("tr",[e("td",[e("code",[v._v("Promise.then catch finally")])]),v._v(" "),e("td",[v._v("✅")]),v._v(" "),e("td",[v._v("✅")])])])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("NodeJs和V8引擎是什么关系？")])]),v._v(" "),e("p",[v._v("V8引擎是chrome浏览器编译解释执行js的环境，Node移植了V8引擎用来解析执行js代码")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("NodeJs是基于单线程的吗？为什么？")])]),v._v(" "),e("p",[v._v("js 本身就是 single thread，NodeJS 发明者将 Chorme v8 vm 引擎 runtime 加上 async io 使得效能得以突出。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("NodeJs的回调有什么用吗？")])]),v._v(" "),e("p",[v._v("由于Node的IO操作是异步的，不知道什么时候执行完毕，用户为了拿到异步操作的结果，采取回调函数的方式拿到操作的结果。因此回调中采取错误优先原则，防止异步操作中有错误，而拿不到错误结果（回调错误的时候的执行回调函数）。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("Node的全局变量有哪些？")])]),v._v(" "),e("ol",[e("li",[v._v("__dirname：当前文件所处目录")]),v._v(" "),e("li",[v._v("__filename：当前文件所处目录+文件名")]),v._v(" "),e("li",[v._v("export：用于导出实现变量 等价于module.export")]),v._v(" "),e("li",[v._v("module：CommonJS中的Module的实例")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("Node的全局对象有哪些？")])])])]),v._v(" "),e("p",[e("strong",[v._v("setTimeout")]),v._v(" "),e("strong",[v._v("setInterval")]),v._v(" "),e("strong",[v._v("process")]),v._v(" "),e("strong",[v._v("console")])]),v._v(" "),e("p",[e("strong",[v._v("Buffer")])]),v._v(" "),e("p",[e("strong",[v._v("clearImmediate")])]),v._v(" "),e("p",[e("strong",[v._v("setImmediate")])]),v._v(" "),e("ol",{attrs:{start:"10"}},[e("li",[e("p",[e("strong",[v._v("怎样在NodeJs中加载HTML文件？")])]),v._v(" "),e("ol",[e("li",[v._v("开启http服务器")]),v._v(" "),e("li",[v._v("使用fs读取对应目录的文件")]),v._v(" "),e("li",[v._v('设置请求头 res.setHeader("Content-Type","text/html;charset=utf-8");')]),v._v(" "),e("li",[v._v("res.write(html字符串)，调用res.end()；获采取res.end(html字符串)；")]),v._v(" "),e("li",[v._v("如果文件过大采取 fs.createReadStream(文件路径).pipe(res);")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("请解释下你对EventEmitter的理解?")])]),v._v(" "),e("ul",[e("li",[v._v("EventEmitter是Node基于发布订阅模式实现的第三方库events")]),v._v(" "),e("li",[v._v("EventEmitter多用于被继承，而并非直接使用")]),v._v(" "),e("li",[v._v("EventEmitter中实现了on、emit、once、off、listen等其他功能")]),v._v(" "),e("li",[v._v("当on中监听newListener事件时，对应的回调会被自动派发")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("你知道什么是REPL吗？")])]),v._v(" "),e("p",[v._v("REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。装有node环境的命令行窗口")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("npm是干什么用的？它有什么优缺点？有没有类似的方案？")]),v._v("⭐️")]),v._v(" "),e("p",[v._v("npm是node包管理工具\n优点：通过npm命令下载第三方包，实现代码的共享，下载的第三方包会在node_modules中。无需再去对应网站下载js文件。\n缺点：当第三方包所需依赖过大时，需要安装的包的数量也是巨大的。由于第三方包属于同级关系，所需要下载的第三方包不利于查看。\n其他工具 "),e("strong",[v._v("yarn")]),v._v(" ?")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("说说你对package.json的理解，它都有哪些作用？")]),v._v("⭐️")]),v._v(" "),e("p",[v._v("package.json是node项目用来记录作者，项目入口，项目描述，项目依赖，启动脚本，项目版本号，项目ip代理，开源许可等其他的项目相关信息，通过package.json可以进行npm包的发布与项目依赖的安装。与之还会存在package-lock.json文件，会具体项目所需依赖的版本等其他信息")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("你了解NodeJs的子进程吗？")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("node遵循的是"),e("strong",[v._v("单线程单进程的模式，node的单线程是指js的引擎只有一个实例，且在nodejs的主线程中执行，同时node以事件驱动的方式处理IO等异步操作")]),v._v("。node的单线程模式，只维持一个主线程，大大减少了线程间切换的开销。")])]),v._v(" "),e("li",[e("p",[v._v("但是node的单线程使得在主线程不能进行CPU密集型操作，否则会阻塞主线程。对于CPU密集型操作，在node中通过"),e("strong",[v._v("child_process")]),v._v("可以创建独立的子进程，父子进程通过IPC通信，子进程可以是外部应用也可以是node子程序，子进程执行后可以将结果返回给父进程。")])]),v._v(" "),e("li",[e("p",[v._v("node中使用child_process创建子线程，通常使用child_process.spawn()、child_process.exec()、child_process.execFile() 或 child_process.fork()进行子线程的创建工作")])])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("你有使用过NodeJs吗？说说你对它的理解，它的运用场景有哪些呢？")])]),v._v(" "),e("p",[v._v("NodeJS使JavaScript运行在服务端。具有异步非阻塞IO，事件循环，主线程为单线，发挥了JavaScript的优势，能够解决高并发，I/O操作密集等问题")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("你有使用过express和koa吗？它俩有什么区别")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("express采取回调方式解决异步问题")]),v._v("，koa采取promise方式解决异步问题")]),v._v(" "),e("li",[v._v("express 内置许多"),e("strong",[v._v("中间件")]),v._v("，koa只提供了核心代码，没有扩展其他中间件")]),v._v(" "),e("li",[v._v("express中间件与koa中间件又差异")]),v._v(" "),e("li",[v._v('express只能通过回调的方式处理错误，koa可以通过监听 on("error") 处理错误')]),v._v(" "),e("li",[e("strong",[v._v("koa中请求与响应都扩展到了ctx上，express是直接对请求req与响应res进行扩展")])])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("setImmediate()")])]),v._v(" "),e("p",[v._v("当要异步地（但要尽可能快）执行某些代码时，其中一个选择是使用 Node.js 提供的 "),e("code",[v._v("setImmediate()")]),v._v(" 函数：")]),v._v(" "),e("p",[v._v("作为 setImmediate() 参数传入的任何函数都是在事件循环的下一个迭代中执行的回调。")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[v._v("setImmediate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//运行一些东西")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("setImmediate()")]),v._v(" 与 "),e("code",[v._v("setTimeout(() => {}, 0)")]),v._v("（传入 0 毫秒的超时）、"),e("code",[v._v("process.nextTick()")]),v._v(" 有何不同？")]),v._v(" "),e("p",[v._v("传给 "),e("code",[v._v("process.nextTick()")]),v._v(" 的函数会在事件循环的"),e("strong",[v._v("当前迭代")]),v._v("中（当前操作结束之后）被执行。 这意味着它会始终在 "),e("code",[v._v("setTimeout")]),v._v(" 和 "),e("code",[v._v("setImmediate")]),v._v(" 之前执行。")]),v._v(" "),e("p",[v._v("延迟 0 毫秒的 "),e("code",[v._v("setTimeout()")]),v._v(" 回调与 "),e("code",[v._v("setImmediate()")]),v._v(" 非常相似。 执行顺序取决于各种因素，但是它们都会在事件循环的下一个迭代中运行。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("Commonjs和ES6module的几个区别")])]),v._v(" "),e("ul",[e("li",[v._v("CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用（"),e("strong",[v._v("补充")]),v._v("：通过esmodule导入的变量是不能重新赋值修改的。）")]),v._v(" "),e("li",[v._v("CommonJS 模块是运行时加载，运行时才能得到这个对象，ES6 模块是编译时加载（静态加载）接口")]),v._v(" "),e("li",[v._v("CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段")])])])])])}),[],!1,null,null,null);_.default=o.exports}}]);