(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{728:function(t,e,v){"use strict";v.r(e);var _=v(5),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"l11-hash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#l11-hash"}},[t._v("#")]),t._v(" L11 Hash")]),t._v(" "),v("p",[v("strong",[t._v("Hashing")]),t._v(" is a technique that is used to uniquely identify a specific object from a group of similar objects.")]),t._v(" "),v("p",[t._v("散列（哈希映射） O(1)"),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705105734906.png",alt:"image-20210705105734906"}})]),t._v(" "),v("h4",{attrs:{id:"homework"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#homework"}},[t._v("#")]),t._v(" Homework")]),t._v(" "),v("p",[t._v("(a) This Data Structure is an ordered array  O(logn)\n(b) This Data Structure is an unordered array O(n)\n(c) This Data Structure is a linked list.  O(n)")]),t._v(" "),v("p",[t._v("Suppose that our hash function is hash(key) = key % table_size. In a hash table of size 13 which index positions would the following two keys map to?")]),t._v(" "),v("p",[t._v("27, 130 ->1,0")]),t._v(" "),v("h4",{attrs:{id:"哈希碰撞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希碰撞"}},[t._v("#")]),t._v(" 哈希碰撞")]),t._v(" "),v("p",[v("strong",[t._v("Suppose that f is a hashing function for integers as follows.")])]),t._v(" "),v("p",[t._v("Which f has collision? A,B 在函数平面图上存在一个y值对应多个x的情况\n(a) f(x) = x^2 + 5\n(b) f(x) = sin(x)\n(c) f(x) = x – 100\n(d) f(x) = x^3")]),t._v(" "),v("p",[t._v("Which f has collision? C,D D为向下取整\n(a) f(x) = x^5\n(b) f(x) = 3x + 90\n(c) f(x) = 4x^2 + 3\n(d) f(x) = ⌈(𝑥+1)/2⌉")]),t._v(" "),v("h4",{attrs:{id:"哈希表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),v("p",[v("strong",[t._v("hash table 哈希表")]),t._v(" is a collection of items which are stored in such a way as to make it easy to find them later.")]),t._v(" "),v("p",[t._v("entry 初始为-1，无映射对象，slot 槽")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[t._v("slot")])]),t._v(" "),v("th",[t._v("0")]),t._v(" "),v("th",[t._v("1")]),t._v(" "),v("th",[t._v("2")]),t._v(" "),v("th",[t._v("3")]),t._v(" "),v("th",[t._v("4")]),t._v(" "),v("th",[t._v("5")]),t._v(" "),v("th",[t._v("6")]),t._v(" "),v("th",[t._v("7")]),t._v(" "),v("th",[t._v("8")]),t._v(" "),v("th",[t._v("9")]),t._v(" "),v("th",[t._v("10")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("entry")])]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")]),t._v(" "),v("td",[t._v("-1")])])])]),t._v(" "),v("h4",{attrs:{id:"哈希函数-hash-function"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数-hash-function"}},[t._v("#")]),t._v(" 哈希函数 Hash function")]),t._v(" "),v("ul",[v("li",[t._v("hash = hashfunc(key) 转换哈希值")]),t._v(" "),v("li",[t._v("index = hash % array_size  索引")])]),t._v(" "),v("p",[v("strong",[t._v("例：ℎ(key) = key % 11")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[t._v("item")])]),t._v(" "),v("th",[v("strong",[t._v("Hash  Value")])]),t._v(" "),v("th",[v("strong",[t._v("Note")])])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("54")]),t._v(" "),v("td",[t._v("10")]),t._v(" "),v("td",[t._v("10  = 54 % 11")])]),t._v(" "),v("tr",[v("td",[t._v("26")]),t._v(" "),v("td",[t._v("4")]),t._v(" "),v("td",[t._v("4 =  26 % 11")])]),t._v(" "),v("tr",[v("td",[t._v("93")]),t._v(" "),v("td",[t._v("5")]),t._v(" "),v("td",[t._v("5 =  93 % 11")])]),t._v(" "),v("tr",[v("td",[t._v("17")]),t._v(" "),v("td",[t._v("6")]),t._v(" "),v("td",[t._v("6 =  17 % 11")])]),t._v(" "),v("tr",[v("td",[t._v("77")]),t._v(" "),v("td",[t._v("0")]),t._v(" "),v("td",[t._v("0 =  77 % 11")])]),t._v(" "),v("tr",[v("td",[t._v("31")]),t._v(" "),v("td",[t._v("9")]),t._v(" "),v("td",[t._v("9 =  31 % 11")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[t._v("slot")])]),t._v(" "),v("th",[t._v("0")]),t._v(" "),v("th",[t._v("1")]),t._v(" "),v("th",[t._v("2")]),t._v(" "),v("th",[t._v("3")]),t._v(" "),v("th",[t._v("4")]),t._v(" "),v("th",[t._v("5")]),t._v(" "),v("th",[t._v("6")]),t._v(" "),v("th",[t._v("7")]),t._v(" "),v("th",[t._v("8")]),t._v(" "),v("th",[t._v("9")]),t._v(" "),v("th",[t._v("10")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("entry")])]),t._v(" "),v("td",[t._v("77")]),t._v(" "),v("td",[t._v("None")]),t._v(" "),v("td",[t._v("None")]),t._v(" "),v("td",[t._v("None")]),t._v(" "),v("td",[t._v("26")]),t._v(" "),v("td",[t._v("93")]),t._v(" "),v("td",[t._v("17")]),t._v(" "),v("td",[t._v("None")]),t._v(" "),v("td",[t._v("None")]),t._v(" "),v("td",[t._v("31")]),t._v(" "),v("td",[t._v("54")])])])]),t._v(" "),v("p",[v("strong",[t._v("负载因子  load factor")]),t._v(" 𝜆=(𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝑖𝑡𝑒𝑚𝑠)/(𝑠𝑖𝑧𝑒 𝑜𝑓 𝑡𝑎𝑏𝑙𝑒).  slot占比")]),t._v(" "),v("h4",{attrs:{id:"collision-碰撞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#collision-碰撞"}},[t._v("#")]),t._v(" collision 碰撞")]),t._v(" "),v("p",[t._v("𝑓(𝑎)=𝑓(𝑏) for some 𝑎≠𝑏")]),t._v(" "),v("p",[t._v("好的哈希函数应该：")]),t._v(" "),v("ul",[v("li",[t._v("Easy to compute")]),t._v(" "),v("li",[t._v("Uniform distribution")]),t._v(" "),v("li",[t._v("Less collisions")])]),t._v(" "),v("p",[t._v("碰撞后使用链表 it will take "),v("strong",[t._v("O(n)")]),t._v(" time (where n is the number of strings) to access a specific string.")]),t._v(" "),v("h3",{attrs:{id:"mid-square-method"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mid-square-method"}},[t._v("#")]),t._v(" "),v("strong",[t._v("Mid-Square Method")])]),t._v(" "),v("p",[t._v("步骤1。取一个种子值并将其平方。")]),t._v(" "),v("p",[t._v("步骤2。从中间提取一些趾作为新的种子。")]),t._v(" "),v("p",[t._v("步骤3。这个过程(步骤1和步骤2)会在需要密钥的情况下重复多次。")]),t._v(" "),v("p",[t._v("请注意，如果取足够大的种子值，该技术可以生成具有高随机性的密钥。")]),t._v(" "),v("h4",{attrs:{id:"example"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),v("p",[t._v("Suppose a "),v("strong",[t._v("4-digit key")]),t._v(" is taken .key = 4765\nHence, square of key is = 4765 * 4765 = 22705225\nNow, from this "),v("strong",[t._v("8-digit number")]),t._v(", any four digits are extracted (Say, the middle four).\nSo, the new key value becomes key = 7052\nNow, square of this new key is = 7052 * 7052 = 49"),v("strong",[t._v("7307")]),t._v("04\nAgain, the same set of 4-digits is extracted.\nSo, the new key value becomes "),v("strong",[t._v("key = 7307")])]),t._v(" "),v("h3",{attrs:{id:"碰撞处理-collision-resolution-techniques"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#碰撞处理-collision-resolution-techniques"}},[t._v("#")]),t._v(" 碰撞处理 Collision resolution techniques")]),t._v(" "),v("p",[t._v("Separate chaining (open hashing)\nlinear probing\nquadratic probing\ndouble hashing")]),t._v(" "),v("h4",{attrs:{id:"separate-chaining-open-hashing-单链-开放哈希"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#separate-chaining-open-hashing-单链-开放哈希"}},[t._v("#")]),t._v(" Separate chaining (open hashing) 单链（开放哈希）")]),t._v(" "),v("p",[t._v("对碰撞数安排在slot的单链上，下图为key mod 7，最坏情况O(n)")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705111941462.png",alt:"image-20210705111941462"}}),t._v(" "),v("p",[v("strong",[t._v("Advantages:")])]),t._v(" "),v("ol",[v("li",[t._v("Simple to implement.")]),t._v(" "),v("li",[v("strong",[t._v("Hash table never fills up")]),t._v(", we can always add more elements to the chain.")]),t._v(" "),v("li",[t._v("Less sensitive to the hash function or load factors.")]),t._v(" "),v("li",[t._v("It is mostly used when it is unknown how many and how frequently keys may be inserted or deleted.\n"),v("strong",[t._v("Disadvantages:")])]),t._v(" "),v("li",[t._v("Cache performance of chaining is not good as keys are stored using a linked list. Open addressing provides better cache performance as everything is stored in the same table.")]),t._v(" "),v("li",[t._v("Wastage of Space (Some Parts of hash table are never used)")]),t._v(" "),v("li",[v("strong",[t._v("If the chain becomes long, then search time can become O(n) in the worst case.")])]),t._v(" "),v("li",[t._v("Uses extra space for links.")])]),t._v(" "),v("h4",{attrs:{id:"linear-probing-open-addressing-or-closed-hashing-线性探测-开放寻址or封闭哈希"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#linear-probing-open-addressing-or-closed-hashing-线性探测-开放寻址or封闭哈希"}},[t._v("#")]),t._v(" Linear probing （"),v("strong",[t._v("open addressing or closed hashing")]),t._v("）线性探测("),v("strong",[t._v("开放寻址or封闭哈希")]),t._v(")")]),t._v(" "),v("p",[v("strong",[t._v("Open addressing:")]),t._v(" Allow elements to “leak out” from their preferred position and spill over into other positions. 允许元件从其首选位置“泄漏”，并溢出到其他位置")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706191115485.png",alt:"image-20210706191115485"}}),t._v(" "),v("p",[v("strong",[t._v("(h(key) + i) % table_size")])]),t._v(" "),v("ul",[v("li",[t._v("Deletions are often implemented using "),v("strong",[t._v("tombstones")]),t._v(". 删除留下墓碑，再插入时可用，不影响墓碑后的内容")])]),t._v(" "),v("p",[v("strong",[t._v("Advantages:")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Low memory overhead:")]),t._v(" just need an array and a hash function.")]),t._v(" "),v("li",[v("strong",[t._v("Excellent locality 优秀的局部性:")]),t._v(" when collisions occur, we only search in adjacent locations in the array.")]),t._v(" "),v("li",[v("strong",[t._v("Great cache performance 高效缓存:")]),t._v(" a combination of the above two factors.")])]),t._v(" "),v("p",[v("strong",[t._v("Weakness:")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Linear probing exhibits severe performance degradations "),v("strong",[t._v("when the load factor gets high")]),t._v(".")])]),t._v(" "),v("li",[v("p",[t._v("The number of collisions tends to grow as a function of the number of existing collisions.")]),t._v(" "),v("ul",[v("li",[t._v("This is called "),v("strong",[t._v("primary clustering")]),t._v(" 一次群集")])])])]),t._v(" "),v("h4",{attrs:{id:"quadratic-probing-二次探测"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#quadratic-probing-二次探测"}},[t._v("#")]),t._v(" Quadratic probing 二次探测")]),t._v(" "),v("p",[t._v("similar to Linear probing. The difference is that if you were to try to insert into a space that is filled you would first check 1^2 = 1  element away then 2^2 = 4 elements away, then 3^2 = 9 elements away then 4^2 = 16 elements away and so on.\n"),v("strong",[t._v("(h(key) + i^2) % table_size")])]),t._v(" "),v("p",[v("strong",[t._v("Example")]),t._v(":Table size is 16. First 5 pieces of data that all hash to index 2")]),t._v(" "),v("ul",[v("li",[t._v("First piece goes to index 2.")]),t._v(" "),v("li",[t._v("Second piece goes to 3 = ((2 + 1)%16")]),t._v(" "),v("li",[t._v("Third piece goes to 6 = ((2+4)%16")]),t._v(" "),v("li",[t._v("Fourth piece goes to 11 = ((2+9)%16")]),t._v(" "),v("li",[t._v("Fifth piece dosen’t get inserted because (2+16)%16==2 which is full so we end up back where we started and we haven’t searched all empty spots.")])]),t._v(" "),v("p",[t._v("为了保证二次探测最终能够命中每一个可用的位置，"),v("strong",[t._v("表的大小必须是质数prime number")])]),t._v(" "),v("h4",{attrs:{id:"double-hashing"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#double-hashing"}},[t._v("#")]),t._v(" Double hashing")]),t._v(" "),v("p",[v("strong",[t._v("(h1(key) + i * h2(key)) % table_size")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("双哈希的工作原理与线性和二次探测类似。")])]),t._v(" "),v("li",[v("p",[t._v("这里的区别是，不是选择下一个开口，而是使用第二个哈希函数来确定下一个地点的位置。")])]),t._v(" "),v("li",[v("p",[t._v("例如，给定哈希函数hash1和hash2以及key。我们做以下工作:")]),t._v(" "),v("ul",[v("li",[t._v("检查位置hash1(key)。如果它是空的，把记录放在里面。")]),t._v(" "),v("li",[t._v("如果不为空，则计算hash2(key)。")]),t._v(" "),v("li",[t._v("检查hash1(key)+hash2(key)是否打开，如果未打开，就重复hash1(key)+2*hash2(key)， hash1(key)+3*hash2(key)，以此类推，直到找到一个打开的。")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[v("strong",[t._v("Linear")]),t._v(" "),v("strong",[t._v("Probing")])]),t._v(" "),v("th",[v("strong",[t._v("Quadratic Probing")])]),t._v(" "),v("th",[v("strong",[t._v("Double Hashing")])])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Frist")]),t._v(" "),v("td",[t._v("h(key)")]),t._v(" "),v("td",[t._v("h(key)")]),t._v(" "),v("td",[t._v("h1(key)")])]),t._v(" "),v("tr",[v("td",[t._v("Second")]),t._v(" "),v("td",[t._v("h(key) + 1")]),t._v(" "),v("td",[t._v("h(key) + 1^2")]),t._v(" "),v("td",[t._v("h1(key) + h2(key)")])]),t._v(" "),v("tr",[v("td",[t._v("Third")]),t._v(" "),v("td",[t._v("h(key) + 2")]),t._v(" "),v("td",[t._v("h(key) + 2^2")]),t._v(" "),v("td",[t._v("h1(key) + 2*h2(key)")])]),t._v(" "),v("tr",[v("td",[t._v("Fourth")]),t._v(" "),v("td",[t._v("h(key) + 3")]),t._v(" "),v("td",[t._v("h(key) + 3^2")]),t._v(" "),v("td",[t._v("h1(key) + 3*h2(key)")])]),t._v(" "),v("tr",[v("td",[t._v("Fifth")]),t._v(" "),v("td",[t._v("h(key) + 4")]),t._v(" "),v("td",[t._v("h(key) + 4^2")]),t._v(" "),v("td",[t._v("h1(key) + 4*h2(key)")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td",[t._v("…")]),t._v(" "),v("td",[t._v("…")]),t._v(" "),v("td",[t._v("…")])])])]),t._v(" "),v("h3",{attrs:{id:"rehashing"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rehashing"}},[t._v("#")]),t._v(" Rehashing")]),t._v(" "),v("p",[t._v("when load factor is too high, create larger table, scan current table, insert items into new table using new hash function. ("),v("strong",[t._v("load factor > 1/2 )")])]),t._v(" "),v("p",[t._v("Rehash, inserting N items costs "),v("strong",[t._v("Rehash时间消耗")])]),t._v(" "),v("p",[t._v("*"),v("em",[t._v("O(1)"),v("em",[t._v("N + O(N) = O(N)")])])]),t._v(" "),v("p",[t._v("Insert still costs "),v("strong",[t._v("O(1)")]),t._v(" amortized")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706194258377.png",alt:"image-20210706194258377"}}),t._v(" "),v("h2",{attrs:{id:"l12-binary-search"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#l12-binary-search"}},[t._v("#")]),t._v(" L12 Binary Search")]),t._v(" "),v("h3",{attrs:{id:"二叉树的高度和深度的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的高度和深度的区别"}},[t._v("#")]),t._v(" 二叉树的高度和深度的区别")]),t._v(" "),v("p",[t._v("高度和深度是相反的表示，深度是从上到下数的，而高度是从下往上数。")]),t._v(" "),v("p",[t._v("**深度的定义：**某节点的深度是指从根节点到该节点的最长简单路径边的条数。\n**高度的定义：**高度是指从该节点到叶子节点的最长简单路径边的条数。")]),t._v(" "),v("p",[t._v("注意：这里边的条数是规定根节点的深度和叶子节点的高度是0；")]),t._v(" "),v("p",[t._v("所以树的深度和高度是相等的，而对其他节点来说深度和高度不一定相等。")]),t._v(" "),v("p",[t._v("数组与二叉树互转"),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705113428403.png",alt:"image-20210705113428403"}})]),t._v(" "),v("h3",{attrs:{id:"binary-search-tree-bst"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#binary-search-tree-bst"}},[t._v("#")]),t._v(" "),v("strong",[t._v("Binary Search Tree")]),t._v(" BST")]),t._v(" "),v("p",[v("strong",[t._v("Minimun element: in the rightest leaf")]),t._v(" "),v("strong",[t._v("Maximun element: in the leftest leaf")])]),t._v(" "),v("p",[v("strong",[t._v("Search time complexity:")])]),t._v(" "),v("ul",[v("li",[t._v("Worest case: O(n) 单链")]),t._v(" "),v("li",[t._v("Best case: O(1) 根")]),t._v(" "),v("li",[t._v("O(log n) 平均树高")])]),t._v(" "),v("h4",{attrs:{id:"inserting-elements"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#inserting-elements"}},[t._v("#")]),t._v(" Inserting Elements")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705113746268.png",alt:"image-20210705113746268"}}),t._v(" "),v("h4",{attrs:{id:"deleting-an-element"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#deleting-an-element"}},[t._v("#")]),t._v(" Deleting an Element")]),t._v(" "),v("ol",[v("li",[v("p",[v("strong",[t._v("a node has no children –")]),t._v(" this is the simplest case; we just need to replace this node with "),v("em",[t._v("null")]),t._v(" in its parent node")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705113828851.png",alt:"image-20210705113828851"}})]),t._v(" "),v("li",[v("p",[v("strong",[t._v("a node has exactly one child –")]),t._v(" in the parent node, we replace this node with its only child.")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705114015651.png",alt:"image-20210705114015651"}})]),t._v(" "),v("li",[v("p",[v("strong",[t._v("a node has two children")]),t._v(" – this is the most complex case because it requires a tree reorganization")]),t._v(" "),v("p",[t._v("找左子树最大叶子或右子树最小叶子进行替换"),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705114138044.png",alt:"image-20210705114138044"}})])])]),t._v(" "),v("h4",{attrs:{id:"time-complexity"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#time-complexity"}},[t._v("#")]),t._v(" Time Complexity")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("Average")]),t._v(" "),v("th",[t._v("Worst")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Insert")]),t._v(" "),v("td",[t._v("O(log n)")]),t._v(" "),v("td",[t._v("O(n)")])]),t._v(" "),v("tr",[v("td",[t._v("Delete")]),t._v(" "),v("td",[t._v("O(log n)")]),t._v(" "),v("td",[t._v("O(n)")])]),t._v(" "),v("tr",[v("td",[t._v("Search")]),t._v(" "),v("td",[t._v("O(log n)")]),t._v(" "),v("td",[t._v("O(n)")])])])]),t._v(" "),v("h3",{attrs:{id:"tree-traversal-数的遍历"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tree-traversal-数的遍历"}},[t._v("#")]),t._v(" Tree Traversal 数的遍历")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705114218524.png",alt:"image-20210705114218524"}}),t._v(" "),v("p",[t._v("前序，中序，后序遍历指的是根节点的被遍历顺序，1，2，3")]),t._v(" "),v("p",[t._v("能够反向推导出对应图：")]),t._v(" "),v("p",[v("strong",[t._v("A → B → D → E → C → F → G")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705114513708.png",alt:"image-20210705114513708"}}),t._v(" "),v("p",[v("strong",[t._v("D → B → E → A → F → C → G")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705114658929.png",alt:"image-20210705114658929"}}),t._v(" "),v("p",[v("strong",[t._v("D → E → B → F → G → C → A")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705114625873.png",alt:"image-20210705114625873"}}),t._v(" "),v("h2",{attrs:{id:"l13-avl-tree-平衡二叉树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#l13-avl-tree-平衡二叉树"}},[t._v("#")]),t._v(" L13 AVL Tree 平衡二叉树")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("算法")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[v("strong",[t._v("平均")])]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[v("strong",[t._v("最差")])])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("空间")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(n)")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(n)")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("搜索")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("插入")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("删除")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")])])])]),t._v(" "),v("h3",{attrs:{id:"avl-implement"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#avl-implement"}},[t._v("#")]),t._v(" AVL implement")]),t._v(" "),v("p",[v("strong",[t._v("|Balance Factor| ≤𝟏")]),t._v(" ：**BF =**height(left subtree) – height(right subtree)，左高减右高，取-1，0，1")]),t._v(" "),v("h4",{attrs:{id:"rotation"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rotation"}},[t._v("#")]),t._v(" Rotation")]),t._v(" "),v("blockquote",[v("p",[t._v("哪边低，把它的中间节点当根节点往上拉（不同边归一边）")])]),t._v(" "),v("img",{staticStyle:{zoom:"67%"},attrs:{src:"images/image-20210706194750627.png",alt:"image-20210706194750627"}}),t._v(" "),v("img",{staticStyle:{zoom:"67%"},attrs:{src:"images/image-20210706194841607.png",alt:"image-20210706194841607"}}),t._v(" "),v("h3",{attrs:{id:"avl-insert"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#avl-insert"}},[t._v("#")]),t._v(" AVL Insert")]),t._v(" "),v("p",[t._v("Step1:按照二叉树正常插入")]),t._v(" "),v("p",[t._v("Step2:更新节点的balanceFactor。")]),t._v(" "),v("p",[t._v("Step3:")]),t._v(" "),v("ul",[v("li",[t._v("If balanceFactor > 1\n"),v("ul",[v("li",[t._v("newNodeKey < leftChildKey  右转")]),t._v(" "),v("li",[t._v("newNodeKey > leftChildKey 左右转")])])]),t._v(" "),v("li",[t._v("balanceFactor < -1\n"),v("ul",[v("li",[t._v("newNodeKey > rightChildKey  左转")]),t._v(" "),v("li",[t._v("newNodeKey < rightChildKey 右左转")])])])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706200530362.png",alt:"image-20210706200530362"}}),t._v(" "),v("h3",{attrs:{id:"avl-delete"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#avl-delete"}},[t._v("#")]),t._v(" AVL Delete")]),t._v(" "),v("p",[t._v("Step1：删除与二叉搜索树一样，找子树的左最大or右最小替换原来的位置")]),t._v(" "),v("p",[t._v("Step2：更新节点的balanceFactor。")]),t._v(" "),v("p",[t._v("Step3：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("If balanceFactor of currentNode > 1")]),t._v(" "),v("ul",[v("li",[t._v("If balanceFactor of leftChild >= 0, do right rotation.")]),t._v(" "),v("li",[t._v("Else do left-right rotation.")])])]),t._v(" "),v("li",[v("p",[t._v("If balanceFactor of currentNode < -1,")]),t._v(" "),v("ul",[v("li",[t._v("If balanceFactor of rightChild <= 0, do left rotation.")]),t._v(" "),v("li",[t._v("Else do right-left rotation.")])])])]),t._v(" "),v("h3",{attrs:{id:"练习"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),v("p",[t._v("starting with an empty tree: "),v("strong",[t._v("10, 20, 15, 25, 30, 16, 18, 19")]),t._v(".")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706202344827.png",alt:"image-20210706202344827"}}),t._v(" "),v("h2",{attrs:{id:"l14-red-black-tree-红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#l14-red-black-tree-红黑树"}},[t._v("#")]),t._v(" L14 Red Black Tree 红黑树")]),t._v(" "),v("p",[t._v("The height of a Red-Black tree is always O(log n) where n is the number of nodes in the tree.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("Algorithm")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("Time  Complexity")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("Search")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("O(log  n)")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("Insert")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("O(log  n)")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("Delete")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("O(log  n)")])])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("**对比 AVL Tree：**The AVL trees are "),v("strong",[t._v("more balanced")]),t._v(" compared to Red-Black Trees, but they may cause "),v("strong",[t._v("more rotations")]),t._v(" during insertion and deletion. 每一棵红黑树都是二叉树的特例。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("black depth of a node：")]),t._v(" 定义为从根节点到该节点的黑节点数量，即黑祖先的数量。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Black Height of a Red-Black Tree :")]),t._v(" "),v("strong",[t._v("黑高度是指从一个节点到一个叶节点的路径上的黑节点数")]),t._v("。"),v("strong",[t._v("叶节点也被计数为黑节点")]),t._v("。从上面的性质3和4，我们可以推导出，高度为h的节点的"),v("strong",[t._v("black-height >= h/2。即高度为h的红黑树的黑高度black-height >= h/2")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("Height of a red-black tree with n nodes")]),t._v(" : "),v("strong",[t._v("h<= 2 log2(n + 1).")])])]),t._v(" "),v("li",[v("p",[t._v("从一个节点到它最远的后代叶的节点数不超过到最近的后代叶的节点数的两倍")])])]),t._v(" "),v("h4",{attrs:{id:"compact"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#compact"}},[t._v("#")]),t._v(" Compact")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705185758949.png",alt:"image-20210705185758949"}}),t._v(" "),v("ul",[v("li",[t._v("The height of compacted tree is O(log n)")]),t._v(" "),v("li",[t._v("Since no two red nodes are connected, the height of the original tree is at most 2 log n = O(log n)")])]),t._v(" "),v("h4",{attrs:{id:"implement"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#implement"}},[t._v("#")]),t._v(" implement")]),t._v(" "),v("p",[v("strong",[t._v("建树规则：")])]),t._v(" "),v("p",[t._v("红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：")]),t._v(" "),v("ol",[v("li",[t._v("节点是红色或黑色。")]),t._v(" "),v("li",[t._v("根是黑色。")]),t._v(" "),v("li",[t._v("所有叶子都是黑色（"),v("strong",[t._v("叶子是NIL节点")]),t._v("）。")]),t._v(" "),v("li",[t._v("每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）")]),t._v(" "),v("li",[t._v("从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。")])]),t._v(" "),v("img",{staticStyle:{zoom:"67%"},attrs:{src:"images/450px-Red-black_tree_example.svg.png",alt:"An example of a red-black tree"}}),t._v(" "),v("p",[v("strong",[t._v("Recoloring 重新上色")]),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705190433442.png",alt:"image-20210705190433442"}})]),t._v(" "),v("p",[v("strong",[t._v("Rotation (Restructuring) 旋转、重构")]),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705190507251.png",alt:"image-20210705190507251"}})]),t._v(" "),v("p",[t._v("重构时，重构子树的根被着色为黑色，其子树被着色为红色")]),t._v(" "),v("p",[v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705190856362.png",alt:"image-20210705190856362"}}),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"images/image-20210705190904076.png",alt:"image-20210705190904076"}})]),t._v(" "),v("p",[v("strong",[t._v("double black problem")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705191102255.png",alt:"image-20210705191102255"}}),t._v(" "),v("h4",{attrs:{id:"insert-插入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#insert-插入"}},[t._v("#")]),t._v(" Insert 插入")]),t._v(" "),v("p",[t._v("向红黑树中插入新的结点。具体做法是，将新结点的 color 赋为红色，然后以二叉排序树的插入方法插入到红黑树中去。之所以将新插入的结点的颜色赋为红色，是因为：如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑结点，这个是很难调整的。但是设为红色结点后，可能会导致出现两个连续红色结点的冲突，那么可以通过颜色调换和树旋转来调整，这样简单多了。")]),t._v(" "),v("p",[t._v("接下来，讨论一下插入以后，红黑树的情况。设要插入的结点为N，其父结点为P，其 祖父结点为G，其父亲的兄弟结点为U（即P和U 是同一个结点的两个子结点）。如果P是黑色的，则整棵树不必调整就已经满足了红黑树的所有性质。如果P是红色的（可知，其父结点G一定是黑色的），则插入N后，违背了红色结点只能有黑色孩子的性质，需要进行调整。")]),t._v(" "),v("p",[v("strong",[t._v("状态 1 父节点为黑色")])]),t._v(" "),v("p",[t._v("父节点为黑色，直接插入")]),t._v(" "),v("p",[v("strong",[t._v("状态 2 父节点为红色")])]),t._v(" "),v("p",[v("strong",[t._v("状态 2.1 uncle 是红色")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705194211374.png",alt:"image-20210705194211374"}}),t._v(" "),v("p",[v("strong",[t._v("状态 2.2 uncle 是黑色的")])]),t._v(" "),v("p",[t._v("**1. Left Left Case **")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705195821740.png",alt:"image-20210705195821740"}}),t._v(" "),v("p",[v("strong",[t._v("2. Left Right Case")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705195830739.png",alt:"image-20210705195830739"}}),t._v(" "),v("p",[v("strong",[t._v("3. Right Right Case")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705195837962.png",alt:"image-20210705195837962"}}),t._v(" "),v("p",[t._v("**4. Right Left Case **")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210705195847121.png",alt:"image-20210705195847121"}}),t._v(" "),v("h4",{attrs:{id:"delete-删除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#delete-删除"}},[t._v("#")]),t._v(" Delete 删除")]),t._v(" "),v("p",[t._v("主要违反的性质是，删除一个黑节点会改变子树的黑高度，从而导致一个根到叶路径的黑高度降低。")]),t._v(" "),v("blockquote",[v("p",[t._v("当"),v("strong",[t._v("删除结点 v")]),t._v(" 是黑色结点，且其被其黑色子节点替换时，其子结点就被标记为 "),v("strong",[t._v("双黑")])])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/v2-bfe124fd0c9891301b547d8ebc969d9f_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("删除操作总纲：")]),t._v(" "),v("ol",[v("li",[t._v("执行标准的 BST 的删除操作")]),t._v(" "),v("li",[t._v("简单情况：u 或者 v 是红色")]),t._v(" "),v("li",[v("strong",[t._v("复杂情况：u 和 v 都是黑色结点。")])])]),t._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"images/v2-3fc34858b4a20389d7b1725c3c275e1c_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("其中的3.2又分为三种情况进行处理：")])]),t._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"images/v2-4f58eb29b3d4541594534a0ed55bba69_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("1. 执行标准的BST删除操作")])]),t._v(" "),v("p",[t._v("在标准的 BST 删除操作中，我们最终都会以删除一个叶子结点或者只有一个孩子的结点而结束（对于内部节点，就是要删除结点左右孩子都存在的情况，最终都会退化到删除结点是叶子结点或者是只有一个孩子的情况）。所以我们仅需要处理被删除结点是叶结点或者仅有一个孩子的情况。（实际上就是找左最大or右最小然后进行替换，而消失的终究是原来左最大or又最小的位置）")]),t._v(" "),v("p",[v("strong",[t._v("2. 简单情况：u 或者 v 是红色")])]),t._v(" "),v("p",[v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic3.zhimg.com/80/v2-f1a3cfafa40a6f318cd986f66ec46f2e_720w.jpg",alt:"img"}}),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-2a0f0a3c7764a09d52830121cbb339a1_720w.jpg",alt:"img"}})]),t._v(" "),v("p",[v("strong",[t._v("3. 复杂情况：u 和 v 都是黑色节点")])]),t._v(" "),v("p",[v("strong",[t._v("3.1 节点u 是双黑节点")]),t._v("\n当要删除结点 v 和孩子结点 u 都是黑色结点，删除结点 v ，导致结点 u 变为双黑结点。当 u 变成双黑结点时，我们的主要任务将变成将该双黑结点 u 变成普通的单黑结点。一定要特别注意，我们在上篇就提到的，"),v("strong",[t._v("NULL结点为黑色结点")]),t._v(" ， 所以删除黑色的叶子结点就会产生一个双黑结点。")]),t._v(" "),v("p",[v("strong",[t._v("3.2 当前结点 u 是双黑结点且不是根结点")]),t._v("\n当前结点 u 是双黑结点且不是根结点，又包含三种情况进行处理。说先我们约定结点 u 的兄弟结点为 s .")]),t._v(" "),v("p",[v("strong",[t._v("（a）u 的兄弟结点 s 是黑色且 s 的孩子结点至少有一个是红色")]),t._v("\n对于这种情况，需要对 u 的兄弟结点 s 进行旋转操作，我们将 s 的一个红色子结点用 r 表示，u 和 s 的父结点用 p 表示，那么结点 p 、s 和 r 的位置将出现以下四种情况（LL、LR、RR、RL）。")]),t._v(" "),v("p",[v("strong",[t._v("a.LL（s 是 p 的左孩子，r 是 s 的左孩子，或者 s 的两个孩子都是红色结点）：")])]),t._v(" "),v("p",[t._v("我们删除下图中的结点 25 为例进行说明。")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic3.zhimg.com/80/v2-6e407665e83bf6aa2d833d8ca2b5914e_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("删除结点 "),v("strong",[t._v("25")]),t._v(" ，用结点 "),v("strong",[t._v("25")]),t._v(" 的NULL结点 "),v("strong",[t._v("a")]),t._v(" 替换结点 "),v("strong",[t._v("25")]),t._v(" ，产生一个双黑结点 "),v("strong",[t._v("u")]),t._v(" ，双黑结点 "),v("strong",[t._v("u")]),t._v(" 的兄弟结点 "),v("strong",[t._v("s")]),t._v(" 为 "),v("strong",[t._v("15")]),t._v(" ，结点 "),v("strong",[t._v("s")]),t._v(" 是其父结点 "),v("strong",[t._v("20（p）")]),t._v(" 的左孩子，其左孩子 "),v("strong",[t._v("18（r）")]),t._v(" 正好是红色结点。即为 "),v("strong",[t._v("LL")]),t._v(" 情况。")]),t._v(" "),v("p",[v("strong",[t._v("s 的左孩子 r 颜色设置为 s 的颜色，s 的颜色设置为父结点 p 的颜色：")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-d8a24459617b58a7ef5ab0189cc80c0d_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("右旋结点20(p):")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-416be68c4157cd94e43cdfb500c54fff_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("将结点 p的颜色设置为黑色，双黑结点变为单黑结点：")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic1.zhimg.com/80/v2-68eda03a702f84e735cba8dff5703ae4_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("a.LR（s 是 p 的左孩子，r 是 s 的右孩子，或者 s 的两个孩子都是红色结点）：")])]),t._v(" "),v("p",[t._v("删除结点 "),v("strong",[t._v("25")]),t._v(" ，不过结点 "),v("strong",[t._v("25")]),t._v(" 的兄弟结点 "),v("strong",[t._v("15")]),t._v(" 只有一个右孩子 "),v("strong",[t._v("18")]),t._v(" ；")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-2002ac506f4c5adb3037a2a3a5b9da3f_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("将结点 r 的颜色设置为 p 的颜色")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-38a3902dd7f6c259f6e83ba403873961_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("左旋结点15（s）")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-19dad08548b787afaa826397f88ac20b_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("右旋结点20（p），p的颜色设置为黑色，双黑变单黑")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-774dc52131cf37747220d34f91d26ed7_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("a.RR（s 是 p 的右孩子，r 是 s 的右孩子，或者 s 的两个孩子都是红色结点）：")])]),t._v(" "),v("p",[t._v("删除结点 "),v("strong",[t._v("2")]),t._v(" ，用结点 "),v("strong",[t._v("2")]),t._v(" 的NULL结点 "),v("strong",[t._v("a")]),t._v(" 替换结点 "),v("strong",[t._v("2")]),t._v(" ，产生一个双黑结点 "),v("strong",[t._v("u")]),t._v(" ，双黑结点 "),v("strong",[t._v("u")]),t._v(" 的兄弟结点 "),v("strong",[t._v("s")]),t._v(" 为 "),v("strong",[t._v("15")]),t._v(" ，结点 "),v("strong",[t._v("s")]),t._v(" 是其父结点 "),v("strong",[t._v("6（p）")]),t._v(" 的右孩子，其右孩子 "),v("strong",[t._v("18（r）")]),t._v(" 正好是红色结点。即为 "),v("strong",[t._v("RR")]),t._v(" 情况（仔细观察其实和 "),v("strong",[t._v("LL")]),t._v(" 情况是对称的）。")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://pic1.zhimg.com/80/v2-33c855ad8794ee5825b7193b1045d07c_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("r的颜色变为s的颜色，s的颜色变为p的颜色")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-955da7048e7fe3c71189975ba0c9da01_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("左旋p，p的颜色设置为黑色，双黑变单黑")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-00fdab4fb75ab1b00f1ea70f91b8c6ef_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("a.RL情况（s 是 p 的右孩子，r 是 s 的左孩子，或者 s 的两个孩子都是红色结点）：")]),t._v(" 该情况与 "),v("strong",[t._v("LR情况是对称的")])]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://pic1.zhimg.com/80/v2-d43b112780b97dd3b3a7186978313a84_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("结点 r 的颜色变为 p 的颜色")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic1.zhimg.com/80/v2-8a094bd32fbd181451918809589db294_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("右旋结点15（s）")])]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://pic2.zhimg.com/80/v2-2875d9253cf24677f8150e03c28d02b5_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("左旋结点6（p），p的颜色设置为黑色，双黑变单黑")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic1.zhimg.com/80/v2-74fc6b8d4b6031ea3257cd35e1f2a468_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("我们接着看3.2的第二类情况。")]),t._v(" "),v("p",[v("strong",[t._v("（b）u 的兄弟结点 s 是黑色且 s 的两个孩子结点都是黑色")])]),t._v(" "),v("p",[t._v("对于这种情况需要递归地进行处理，如果删除结点后得到的双黑结点的父结点此时为黑色，则结点 "),v("strong",[t._v("u")]),t._v(" 变单黑，且结点 "),v("strong",[t._v("u")]),t._v(" 的父结点 "),v("strong",[t._v("p")]),t._v(" 变双黑，然后对结点 "),v("strong",[t._v("u")]),t._v(" 的父结点 "),v("strong",[t._v("p")]),t._v(" 继续进行处理，直到当前处理的双黑结点的父结点为红色结点，此时将双黑结点的父结点设置为黑色，双黑结点变为单黑结点（红色 + 双黑 = 单黑）。")]),t._v(" "),v("p",[t._v("假设以 "),v("strong",[t._v("10")]),t._v(" 为根结点的子树为整棵树的左子树，删除结点 "),v("strong",[t._v("9")]),t._v(" ，产生双黑结点 "),v("strong",[t._v("c")]),t._v(" 且其兄弟结点 "),v("strong",[t._v("12（s）")]),t._v(" 为黑色，兄弟结点的左右孩子均为黑色。")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://pic4.zhimg.com/80/v2-130fcae45fa7fcd9aef2d89eb09c6ebf_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("此时双黑结点的兄弟结点 "),v("strong",[t._v("12")]),t._v(" 变为红色结点，然后将 "),v("strong",[t._v("u")]),t._v(" 的父结点 "),v("strong",[t._v("10")]),t._v(" 变为双黑结点，一直向上判断。")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://pic1.zhimg.com/80/v2-667f142ff2a163ef587ac495bdb41e14_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("至于这一过程何时结束，我们再看下面一个例子。")]),t._v(" "),v("p",[t._v("删除下图中的结点 "),v("strong",[t._v("12")]),t._v(" ，得到一个双黑结点 "),v("strong",[t._v("u")]),t._v(" ，双黑结点的兄弟结点 "),v("strong",[t._v("31")]),t._v(" 及兄弟结点的孩子结点均为黑色，且双黑结点的父结点 "),v("strong",[t._v("19")]),t._v(" 为红色结点，刚好是不再继续向上判断的情况。")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-3da0f0c0a2f1791a6b4d06ba338d5cb7_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("此时只需要将结点 "),v("strong",[t._v("u")]),t._v(" 的兄弟结点 "),v("strong",[t._v("31")]),t._v(" 的颜色变为红色，双黑结点 "),v("strong",[t._v("u")]),t._v(" 的父结点 "),v("strong",[t._v("19")]),t._v(" 由红色变为黑色结点，双黑结点 "),v("strong",[t._v("u")]),t._v(" 变为单黑结点。")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-a79fce7413b19d1ae8d88d25988235ab_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("我们接着看3.2 （当前结点 u 是双黑结点且不是根结点）的第三类情况。")]),t._v(" "),v("p",[v("strong",[t._v("（c）u 的兄弟结点 s 是红色结点")])]),t._v(" "),v("p",[t._v("当前 u 的兄弟结点 s 是红色结点时，通过旋转操作将 u 当前的兄弟结点向上移动，并对 u 的父结点和其旋转前的兄弟结点重新着色，接着继续对结点 u 旋转后的兄弟结点 s 进行判断，确定相应的平衡操作。旋转操作将 u 的兄弟结点情况又会转换为前面刚提到的3.2（a）和（b）的情况。根据兄弟结点 s 是父结点 p 的左右孩子又分为两种情况。")]),t._v(" "),v("p",[v("strong",[t._v("u 的兄弟结点 s 是父结点 p 的左孩子 ,对结点 p 进行右旋操作：")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic3.zhimg.com/80/v2-f1b0f7109775b0b93fd0f7cb034c03c2_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("删除结点 "),v("strong",[t._v("18")]),t._v(" ，产生一个双黑结点 "),v("strong",[t._v("u")]),t._v(" ，且 "),v("strong",[t._v("u")]),t._v(" 的兄弟结点 "),v("strong",[t._v("s")]),t._v(" 是红色，兄弟结点 "),v("strong",[t._v("s")]),t._v(" 是其父结点的左孩子，接着就是对其父结点 "),v("strong",[t._v("15")]),t._v(" 进行右旋操作。")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic1.zhimg.com/80/v2-09f86f5502a1259ae1029ee7699c0f38_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("对结点 "),v("strong",[t._v("15")]),t._v(" 进行右旋操作，并且对旋转前的 "),v("strong",[t._v("p")]),t._v(" 和 "),v("strong",[t._v("s")]),t._v(" 进行重新着色后，继续对双黑结点旋转后的兄弟结点进行判断，发现此时正好和3.2（b）的情况是一样，进行相应处理，如下图所示。")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-d7031957af29da4d3560ac1dc06d8a25_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("u 的兄弟结点 s 是父结点 p 的左孩子 ,对结点 p 进行左旋操作（这种情况与上面的是对称的）：")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-df67f816117251cb5e0953006ea73329_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("删除结点 "),v("strong",[t._v("6")]),t._v(" ，产生一个双黑结点 "),v("strong",[t._v("u")]),t._v(" ，且 "),v("strong",[t._v("u")]),t._v(" 的兄弟结点 "),v("strong",[t._v("s")]),t._v(" 为黑色，"),v("strong",[t._v("s")]),t._v(" 是父结点 "),v("strong",[t._v("p")]),t._v(" 的右孩子，左旋P")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-8ed50fc431f825144b4650dfc66d5deb_720w.jpg",alt:"img"}}),t._v(" "),v("p",[t._v("对双黑结点 "),v("strong",[t._v("u")]),t._v(" 旋转后的兄弟结点继续判断：")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic1.zhimg.com/80/v2-241bdb7fbf80e4762f2d8e0947728060_720w.jpg",alt:"img"}}),t._v(" "),v("p",[v("strong",[t._v("3.3 当前结点 u 是双黑结点且是根结点")])]),t._v(" "),v("p",[t._v("当前结点 "),v("strong",[t._v("u")]),t._v(" 是双黑结点且是根结点时，"),v("strong",[t._v("直接将双黑结点变为单黑结点，整颗红黑树的黑高减 1.")])])])}),[],!1,null,null,null);e.default=a.exports}}]);