(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{639:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"伪类与伪元素的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪类与伪元素的区别"}},[t._v("#")]),t._v(" 伪类与伪元素的区别")]),t._v(" "),a("h3",{attrs:{id:"伪类-pseudo-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪类-pseudo-classes"}},[t._v("#")]),t._v(" "),a("strong",[t._v("伪类(pseudo-classes)")])]),t._v(" "),a("p",[t._v("其核心就是用来选择那些不能够被普通选择器选择的文档之外的元素，比如:hover。")]),t._v(" "),a("h3",{attrs:{id:"伪元素-pseudo-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪元素-pseudo-elements"}},[t._v("#")]),t._v(" "),a("strong",[t._v("伪元素(Pseudo-elements)")])]),t._v(" "),a("p",[t._v("其核心就是需要创建通常不存在于文档中的元素，比如::before。")]),t._v(" "),a("h3",{attrs:{id:"伪类与伪元素的区别-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪类与伪元素的区别-2"}},[t._v("#")]),t._v(" "),a("strong",[t._v("伪类与伪元素的区别")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("表示方法")]),t._v(" "),a("p",[t._v("CSS2 中伪类、伪元素都是以单冒号"),a("code",[t._v(":")]),t._v("表示，CSS2.1 后规定伪类用单冒号表示，伪元素用双冒号"),a("code",[t._v("::")]),t._v("表示，浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first-line, :first-letter 等)的单冒号写法。对于 CSS2 之后所有新增的伪元素(如::selection)，应该采用双冒号的写法。但是因为兼容性问题，大部分还是用的单冒号。")])]),t._v(" "),a("li",[a("p",[t._v("定义不同")]),t._v(" "),a("p",[t._v("伪类即假的类，通常可以添加类来达到效果，伪元素即假元素，需要通过添加元素才能达到效果。来看下面的例子")]),t._v(" "),a("p",[a("strong",[t._v("例 1:将一行字符串的首字母变成红色")])]),t._v(" "),a("p",[t._v("现在不用伪元素应该如何实现？用 CSS slector 选择？想了一晚上也没想出来，既然没法选择也就没法添加一个类来改变首字母的颜色。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("I am snow"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("添加元素试试，如下，创建一个元素 span 将首字母包裹起来，进而改变其颜色，成功了。这里，关键点在于我们创建了新的元素达到了"),a("code",[t._v("::first-letter")]),t._v("的作用，且不能通过添加其他类来实现这一效果，因此将"),a("code",[t._v("::first-letter")]),t._v("叫做伪元素而不是伪类。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token special-attr"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value css language-css"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")])])])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("color:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("red")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("}}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("I"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v(" am snow"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[a("strong",[t._v("例 2: 如下要将 I am snow 这句话变为红色")])]),t._v(" "),a("p",[t._v("很简单用"),a("code",[t._v(":first-child")]),t._v("，同样添加一个类试试，显然很容易达到同样效果，我们并没有创建新的元素只是添加了一个类"),a("code",[t._v(".red-line")]),t._v("，因此将"),a("code",[t._v(":first-child")]),t._v("叫做伪类而不是伪元素，尽管它和"),a("code",[t._v("::first-letter")]),t._v("在语义上十分相似。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("div:first-child {\n color: red;\n}\n或\n.red-line {\n   color: red;\n}\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("red-line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("I am snow"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" "),a("strong",[t._v("结论")])]),t._v(" "),a("ul",[a("li",[t._v('伪类和伪元素都是用来表示文档树以外的"元素"。')]),t._v(" "),a("li",[t._v("伪类和伪元素分别用单冒号"),a("code",[t._v(":")]),t._v("和双冒号"),a("code",[t._v("::")]),t._v("来表示。")]),t._v(" "),a("li",[t._v("伪类和伪元素的区别，最关键的点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到目的，如果是则是伪元素，反之则是伪类。")])]),t._v(" "),a("p",[t._v("关于常用的伪类与伪元素选择器可以查看"),a("a",{attrs:{href:"https://juejin.cn/post/6844903807386648583",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS选择器"),a("OutboundLink")],1),t._v("一文。")])])}),[],!1,null,null,null);s.default=n.exports}}]);