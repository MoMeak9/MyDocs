(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{635:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),a("p",[t._v("不同与我们之前介绍的线性结构，今天我们介绍一种非线性结构：树，树的内容比较多，包括BST树、AVL树、Trie树等，这部分内容将放在下几个章节陆续放出，本章将介绍树与二叉树的基础必会内容，在开始这一章节前，请思考以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("什么是树？")]),t._v(" "),a("li",[t._v("树的高度怎么计算？")]),t._v(" "),a("li",[t._v("什么是二叉树？")]),t._v(" "),a("li",[t._v("什么是平衡二叉树？")]),t._v(" "),a("li",[t._v("在代码中如何表示一棵二叉树？")]),t._v(" "),a("li",[t._v("二叉树的前序、中序、后序遍历又是什么？如何实现？")]),t._v(" "),a("li",[t._v("能否用递归及迭代两种方式实现喃？")])]),t._v(" "),a("p",[t._v("下面进入本节内容👇")]),t._v(" "),a("h3",{attrs:{id:"一、树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、树"}},[t._v("#")]),t._v(" 一、树")]),t._v(" "),a("p",[t._v("不同于我们上面介绍的线性结构，树是一种非线性结构。")]),t._v(" "),a("p",[t._v("图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e0db6a424~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("p",[t._v("它遵循：")]),t._v(" "),a("ul",[a("li",[t._v("仅有唯一一个根节点，没有节点则为空树")]),t._v(" "),a("li",[t._v("除根节点外，每个节点都有并仅有唯一一个父节点")]),t._v(" "),a("li",[t._v("节点间不能形成闭环")])]),t._v(" "),a("p",[t._v("这就是树！")]),t._v(" "),a("p",[t._v("树有几个概念：")]),t._v(" "),a("ul",[a("li",[t._v("拥有相同父节点的节点，互称为兄弟节点")]),t._v(" "),a("li",[a("strong",[t._v("节点的深度")]),t._v(" ：从根节点到该节点所经历的边的个数")]),t._v(" "),a("li",[a("strong",[t._v("节点的高度")]),t._v(" ：节点到叶节点的最长路径")]),t._v(" "),a("li",[t._v("树的高度：根节点的高度")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e4a831d24~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("p",[t._v("B、C、D就互称为兄弟节点，其中，节点B的高度为2，节点B的深度为 1，树的高度为3")]),t._v(" "),a("h4",{attrs:{id:"高度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高度"}},[t._v("#")]),t._v(" 高度")]),t._v(" "),a("p",[t._v("树的高度计算公式：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e57410c78~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("p",[t._v("下图每个节点值都代表来当前节点的高度：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e1e136378~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"二、二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、二叉树"}},[t._v("#")]),t._v(" 二、二叉树")]),t._v(" "),a("p",[t._v("二叉树，故名思义，最多仅有两个子节点的树（最多能分两个叉的树🤦‍♀️）：")]),t._v(" "),a("p",[t._v("图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e1c381b26~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"三、平衡二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、平衡二叉树"}},[t._v("#")]),t._v(" 三、平衡二叉树")]),t._v(" "),a("p",[t._v("二叉树中，每一个节点的左右子树的高度相差不能大于 1，称为平衡二叉树。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e1dfd954f~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("p",[t._v("另外还有满二叉树、完全二叉树等：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("满二叉树")]),t._v("：除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树")]),t._v(" "),a("li",[a("strong",[t._v("完全二叉树")]),t._v("：深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h 层所有的结点都连续集中在最左边")])]),t._v(" "),a("h3",{attrs:{id:"四、在代码中如何去表示一棵二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、在代码中如何去表示一棵二叉树"}},[t._v("#")]),t._v(" 四、在代码中如何去表示一棵二叉树")]),t._v(" "),a("h4",{attrs:{id:"_1-链式存储法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-链式存储法"}},[t._v("#")]),t._v(" 1. 链式存储法")]),t._v(" "),a("p",[t._v("二叉树的存储很简单，在二叉树中，我们看到每个节点都包含三部分：")]),t._v(" "),a("ul",[a("li",[t._v("当前节点的 val")]),t._v(" "),a("li",[t._v("左子节点 left")]),t._v(" "),a("li",[t._v("右子节点 right")])]),t._v(" "),a("p",[t._v("所以我们可以将每个节点定义为：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存当前节点 key 值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向左子节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向右子节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一棵二叉树可以由根节点通过左右指针连接起来形成一个树。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-数组存储法-适用于完全二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组存储法-适用于完全二叉树"}},[t._v("#")]),t._v(" 2. 数组存储法（适用于完全二叉树）")]),t._v(" "),a("p",[t._v("下图就是一棵完全二叉树，")]),t._v(" "),a("p",[t._v("如果我们把根节点存放在位置 "),a("code",[t._v("i=1")]),t._v(" 的位置，则它的左子节点位置为 "),a("code",[t._v("2i = 2")]),t._v(" ，右子节点位置为 "),a("code",[t._v("2i+1 = 3")]),t._v(" 。")]),t._v(" "),a("p",[t._v("如果我们选取 B 节点 "),a("code",[t._v("i=2")]),t._v(" ，则它父节点为 "),a("code",[t._v("i/2 = 1")]),t._v(" ，左子节点 "),a("code",[t._v("2i=4")]),t._v(" ，右子节点  "),a("code",[t._v("2i+1=5")]),t._v(" 。")]),t._v(" "),a("p",[t._v("以此类推，我们发现所有的节点都满足这三种关系：")]),t._v(" "),a("ul",[a("li",[t._v("位置为 i 的节点，它的父节点位置为 "),a("code",[t._v("i/2")])]),t._v(" "),a("li",[t._v("它的左子节点 "),a("code",[t._v("2i")])]),t._v(" "),a("li",[t._v("它的右子节点  "),a("code",[t._v("2i+1")])])]),t._v(" "),a("p",[t._v("因此，如果我们把完全二叉树存储在数组里（从下标为 1 开始存储），我们完全可以通过下标找到任意节点的父子节点。从而完整的构建出这个完全二叉树。这就是数组存储法。")]),t._v(" "),a("p",[t._v("数组存储法相对于链式存储法不需要为每个节点创建它的左右指针，更为节省内存。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e4acfb302~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"五、二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、二叉树的遍历"}},[t._v("#")]),t._v(" 五、二叉树的遍历")]),t._v(" "),a("p",[t._v("二叉树的遍历可分为：")]),t._v(" "),a("ul",[a("li",[t._v("前序遍历")]),t._v(" "),a("li",[t._v("中序遍历")]),t._v(" "),a("li",[t._v("后序遍历")])]),t._v(" "),a("p",[t._v("所谓前、中、后，不过是根的顺序，即也可以称为先根遍历、中根遍历、后根遍历")]),t._v(" "),a("h4",{attrs:{id:"_1-前序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-前序遍历"}},[t._v("#")]),t._v(" 1. 前序遍历")]),t._v(" "),a("p",[t._v("对于二叉树中的任意一个节点，先打印该节点，然后是它的左子树，最后右子树")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e66c55995~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_2-中序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-中序遍历"}},[t._v("#")]),t._v(" 2. 中序遍历")]),t._v(" "),a("p",[t._v("对于二叉树中的任意一个节点，先打印它的左子树，然后是该节点，最后右子树")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e5defdbab~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_3-后序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-后序遍历"}},[t._v("#")]),t._v(" 3. 后序遍历")]),t._v(" "),a("p",[t._v("对于二叉树中的任意一个节点，先打印它的左子树，然后是右子树，最后该节点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/1720480e69652b1f~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_4-代码实现-前序遍历为例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码实现-前序遍历为例"}},[t._v("#")]),t._v(" 4. 代码实现（前序遍历为例）")]),t._v(" "),a("p",[t._v("所以，遍历二叉树的过程也就是一个递归的过程，例如前序遍历，先遍历根节点，然后是根的左子树，最后右子树；遍历根节点的左子树的时候，又是先遍历左子树的根节点，然后左子树的左子树，左子树的右子树…….")]),t._v(" "),a("p",[t._v("所以，它的核心代码就是：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前序遍历核心代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("preOrderTraverseNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先根节点")]),t._v("\n        result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后遍历左子树")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preOrderTraverseNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再遍历右子树")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preOrderTraverseNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("完整代码如下：")]),t._v(" "),a("h5",{attrs:{id:"递归实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归实现"}},[t._v("#")]),t._v(" 递归实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前序遍历")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("preorderTraversal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("preOrderTraverseNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先根节点")]),t._v("\n            result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后遍历左子树")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preOrderTraverseNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再遍历右子树")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preOrderTraverseNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preOrderTraverseNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们既然可以使用递归实现，那么是否也可以使用迭代实现喃？")]),t._v(" "),a("h5",{attrs:{id:"迭代实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代实现"}},[t._v("#")]),t._v(" 迭代实现")]),t._v(" "),a("p",[t._v("利用栈来记录遍历的过程，实际上，递归就使用了调用栈，所以这里我们可以使用栈来模拟递归的过程")]),t._v(" "),a("ul",[a("li",[t._v("首先根入栈")]),t._v(" "),a("li",[t._v("将根节点出栈，将根节点值放入结果数组中")]),t._v(" "),a("li",[t._v("然后遍历左子树、右子树，因为栈是先入后出，所以，我们先右子树入栈，然后左子树入栈")]),t._v(" "),a("li",[t._v("继续出栈（左子树被出栈）…….")])]),t._v(" "),a("p",[t._v("依次循环出栈遍历入栈，直到栈为空，遍历完成")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前序遍历")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("preorderTraversal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当根节点不为空的时候，将根节点入栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" curNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一步的时候，先访问的是根节点")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们先打印左子树，然后右子树")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以先加入栈的是右子树，然后左子树")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[t._v("#")]),t._v(" 复杂度分析：")]),t._v(" "),a("p",[t._v("空间复杂度：O(n)")]),t._v(" "),a("p",[t._v("时间复杂度：O(n)")]),t._v(" "),a("p",[t._v("至此，我们已经实现了二叉树的前序遍历，尝试思考一下二叉树的中序遍历如何实现喃？")]),t._v(" "),a("h3",{attrs:{id:"六、leetcode94-二叉树的中序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、leetcode94-二叉树的中序遍历"}},[t._v("#")]),t._v(" 六、leetcode94：二叉树的中序遍历")]),t._v(" "),a("p",[t._v("给定一个二叉树，返回它的 "),a("strong",[t._v("中序")]),t._v(" 遍历。")]),t._v(" "),a("p",[a("strong",[t._v("示例:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);