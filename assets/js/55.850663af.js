(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{632:function(t,n,e){"use strict";e.r(n);var r=e(5),a=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前端算法自救"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端算法自救"}},[t._v("#")]),t._v(" 前端算法自救")]),t._v(" "),e("h2",{attrs:{id:"db-动态规划"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#db-动态规划"}},[t._v("#")]),t._v(" DB 动态规划")]),t._v(" "),e("h3",{attrs:{id:"思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思想"}},[t._v("#")]),t._v(" 思想")]),t._v(" "),e("p",[t._v("感觉很像时高中数列的思想，给出首项，以及一个递推式子，让你求任意项的值。")]),t._v(" "),e("p",[t._v("步骤基本是： 寻找状态转移方程 => 建立合适的数据结构表 => 填表")]),t._v(" "),e("h4",{attrs:{id:"爬楼梯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#爬楼梯"}},[t._v("#")]),t._v(" 爬楼梯")]),t._v(" "),e("p",[t._v("假设你正在爬楼梯。需要 "),e("em",[t._v("n")]),t._v(" 阶你才能到达楼顶。")]),t._v(" "),e("p",[t._v("每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\ndp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 到达第n阶楼梯有从n-1阶走一步和从第n-2阶走两步两种情况")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("climbStairs")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"打家劫舍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打家劫舍"}},[t._v("#")]),t._v(" 打家劫舍")]),t._v(" "),e("p",[t._v("你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。")]),t._v(" "),e("p",[t._v("给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态规划方程：dp[n] = num + Max(dp[n-1])")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于不可以在相邻的房屋闯入，所以在当前位置 n 房屋可盗窃的最大值，要么就是 n-1 房屋可盗窃的最大值，要么就是 n-2 房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 举例来说：1 号房间可盗窃最大值为 33 即为 dp[1]=3，2 号房间可盗窃最大值为 44 即为 dp[2]=4，3 号房间自身的值为 22 即为 num=2，那么 dp[3] = MAX( dp[2], dp[1] + num ) = MAX(4, 3+2) = 5，3 号房间可盗窃最大值为 55")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("rob")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Math"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"最大正方形"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最大正方形"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fmaximal-square%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大正方形"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const maximalSquare = (matrix) => {\n  if (!matrix.length) return 0\n  \n  let maxsqlen = 0\n  let rowLength = matrix.length, colLength = matrix[0].length\n  for (let row = 0; row < rowLength; row++) {\n    for (let col = 0; col < colLength; col++) {\n      if (matrix[row][col] === '1') {\n        matrix[row][col] = Number(matrix[row][col])\n        if (row != 0 && col != 0) {\n          matrix[row][col] = Math.min(matrix[row-1][col], matrix[row-1][col-1], matrix[row][col-1]) + 1\n        }\n        maxsqlen = Math.max(maxsqlen, matrix[row][col])\n      } \n    }\n  }\n  return maxsqlen**2 \n    \n}\n\n/** DP \n * 题目要求最大正方形面积，面积 = 边长 * 边长，也就是求最大正方形的边长\n * 所以也就变成了，在矩阵中找最大正方形，矩阵中只有0｜1两种值，全部为1的才是正方形\n * 如何知道矩阵中哪里是1，哪里是0，只能穷举，但要聪明的穷举，这不就是动态规划的本质嘛！\n * 动态规划第一步，先假象我们创建了一个二维数组dp，用来存储「这个点为右下角的最大正方形的边长」\n * 下面开始找 状态转换方程\n * 思路：假设有如下矩阵\n * 1 0 1 1 1\n * 1 1 1 1 1\n * 1 1 1 1 1\n * 1 0 0 1 1\n * 随便找一个点，直观地，我们先找最右下角的点，设该点的最大正方形边长为 dp[i][j], 我们用肉眼看一下，dp[i][j] 应该等于 2\n * 为什么等于2，是因为我们看了 dp[i-1][j], dp[i-1][j-1], dp[i][j-1] 这三个点都为1，而又因为dp[i][j-2] 为0，所以\n * 我们知道dp[i][j]最大就为2了。也就是我们不能只看dp[i][j]相邻的三个点，而应该看「这三个相邻点为正方形右下角」的边长情况，\n * 取最小边长进行求解 dp[i][j] 的最大正方形边长。（看，我们找到了重叠子问题和最优子结构）\n * 所以，状态转换方程为：dp[i][j] = Math.min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1\n * 下一步，需要根据矩阵数据，进行选择和明确 base case 即可\n */\n复制代码\n")])])]),e("h4",{attrs:{id:"零钱兑换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#零钱兑换"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcoin-change%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("零钱兑换"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// dp[0] = 0 金额为零时不需要硬币\n// dp[n] = min(dp[n],dp[n-coin1] + 1，dp[n-coin2],...)  金额为n时，硬币数等于(n-coin)+1中所需硬币最少的组合\nvar coinChange = function(coins, amount) {\n  let dp = new Array( amount + 1 ).fill( Infinity );\n  dp[0] = 0;\n  \n  for (let i = 1; i <= amount; i++) {\n    for (let coin of coins) {\n      if (i - coin >= 0) {\n        dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n      }\n    }\n  }\n  \n  return dp[amount] === Infinity ? -1 : dp[amount];\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"不同路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同路径"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Funique-paths%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("不同路径"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。")]),t._v(" "),e("p",[t._v("机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。")]),t._v(" "),e("p",[t._v("问总共有多少条不同的路径")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var uniquePaths = function(m, n) {\n    if(m === 1 && n === 1) return 1;\n    let data = [],rows = [0];\n    for(let i = 0;i < n-1;i++){\n        rows.push(1);\n    }\n    data.push(rows);\n    for(let i = 0;i < m-1;i++){\n        data.push([1]);\n    }\n    for(let i = 1;i < m;i++){\n        for(let j = 1;j < n;j++){\n            data[i][j] = data[i-1][j] + data[i][j-1];\n        }\n    }\n    return data[m-1][n-1];\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"股票题状态机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#股票题状态机"}},[t._v("#")]),t._v(" 股票题状态机")]),t._v(" "),e("p",[t._v("本文就来告诉你这个框架，然后带着你一道一道秒杀。")]),t._v(" "),e("p",[t._v("这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。")]),t._v(" "),e("p",[t._v("第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。")]),t._v(" "),e("h5",{attrs:{id:"一、穷举框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、穷举框架"}},[t._v("#")]),t._v(" 一、穷举框架")]),t._v(" "),e("p",[t._v("首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。")]),t._v(" "),e("p",[t._v("递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。")]),t._v(" "),e("p",[t._v("而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("for 状态1 in 状态1的所有取值：\n    for 状态2 in 状态2的所有取值：\n        for ...\n            dp[状态1][状态2][...] = 择优(选择1，选择2...)\n复制代码\n")])])]),e("p",[t._v("比如说这个问题，"),e("strong",[t._v("每天都有三种「选择」")]),t._v("：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k > 0 的前提下操作。")]),t._v(" "),e("p",[t._v("很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。"),e("strong",[t._v("这个问题的「状态」有三个")]),t._v("，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dp[i][k][0 or 1]\n0 <= i <= n-1, 1 <= k <= K\nn 为天数，大 K 为最多交易数\n此问题共 n × K × 2 种状态，全部穷举就能搞定。\n\nfor 0 <= i < n:\n    for 1 <= k <= K:\n        for s in {0, 1}:\n            dp[i][k][s] = max(buy, sell, rest)\n复制代码\n")])])]),e("p",[t._v("而且我们可以用自然语言描述出每一个状态的含义，比如说 "),e("code",[t._v("dp[3][2][1]")]),t._v(" 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 "),e("code",[t._v("dp[2][3][0]")]),t._v(" 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？")]),t._v(" "),e("p",[t._v("我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。")]),t._v(" "),e("p",[t._v("记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。")]),t._v(" "),e("h5",{attrs:{id:"二、状态转移框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、状态转移框架"}},[t._v("#")]),t._v(" 二、状态转移框架")]),t._v(" "),e("p",[t._v("现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268eba816df50d~tplv-t2oaga2asx-watermark.awebp",alt:"40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png"}})]),t._v(" "),e("p",[t._v("通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])\n              max(   选择 rest  ,           选择 sell      )\n\n解释：今天我没有持有股票，有两种可能：\n要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；\n要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。\n\ndp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])\n              max(   选择 rest  ,           选择 buy         )\n\n解释：今天我持有着股票，有两种可能：\n要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；\n要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。\n复制代码\n")])])]),e("p",[t._v("这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。")]),t._v(" "),e("p",[t._v("现在，我们已经完成了动态规划中最困难的一步：状态转移方程。"),e("strong",[t._v("如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了")]),t._v("。不过还差最后一点点，就是定义 base case，即最简单的情况。")]),t._v(" "),e("h4",{attrs:{id:"如果你最多只允许完成一笔交易-即买入和卖出一支股票一次-设计一个算法来计算你所能获取的最大利润。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果你最多只允许完成一笔交易-即买入和卖出一支股票一次-设计一个算法来计算你所能获取的最大利润。"}},[t._v("#")]),t._v(" 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var maxProfit = function(prices) {\n    let dp_i_0 = 0,dp_i_1 = -Infinity;\n    for(let i = 0;i < prices.length;i++){\n        dp_i_0 = Math.max(dp_i_0,dp_i_1+prices[i]);\n        dp_i_1 = Math.max(dp_i_1,-prices[i]);\n    }\n    return dp_i_0;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"买卖股票的最佳时机-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票的最佳时机-ii"}},[t._v("#")]),t._v(" 买卖股票的最佳时机 II")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 只要股票价格上涨，上涨的部分就是我的利润，可以理解为上涨期间第一天买入，然后一直持有到上涨最后一天即下跌前一天再卖出\n2. 只要股票价格下跌，那我肯定在下跌前一天卖了，而且下跌期间永远不会买入\nvar maxProfit = function(prices) {\n  let profit = 0;\n  for (let i = 0; i < prices.length - 1; i++) {\n    if (prices[i + 1] > prices[i]) profit += prices[i + 1] - prices[i];\n  }\n  return profit;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"贪心"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪心"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("贪心"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"思想-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思想-2"}},[t._v("#")]),t._v(" 思想")]),t._v(" "),e("p",[e("strong",[t._v("在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解最优解")])]),t._v(" "),e("h4",{attrs:{id:"剪绳子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#剪绳子"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fjian-sheng-zi-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("剪绳子"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]"),e("em",[t._v("k[1]")]),t._v("...*k[m] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var cuttingRope = function(number) {\n    if(number === 2 || number === 3) return number - 1;\n    let a = number % 3;\n    let b = parseInt(number / 3);\n    if(a === 0){\n        return 3 ** b;\n    }else if(a === 1){\n        return 2 * 2 * (3 ** (b - 1));\n    }else{\n        return 2 * (3 ** b);\n    }\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"跳跃游戏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跳跃游戏"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fjump-game%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个非负整数数组，你最初位于数组的第一个位置。")]),t._v(" "),e("p",[t._v("数组中的每个元素代表你在该位置可以跳跃的最大长度。")]),t._v(" "),e("p",[t._v("判断你是否能够到达最后一个位置。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 使用一个变量保存当前可到达的最大位置\n2. 时刻更新最大位置\n3. 可达位置小于数组长度返回false，反之即反\nvar canJump = function(nums) {\n    let k = 0;\n    for(let i = 0;i < nums.length;i++){\n        if(i > k) return false;\n        k = Math.max(k,i + nums[i]);\n    }\n    return true;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"加油站"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加油站"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fgas-station%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("加油站"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。")]),t._v(" "),e("p",[t._v("你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。")]),t._v(" "),e("p",[t._v("如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. gas - cost >= 0才能绕场一周，以此思想判断能否行驶一周\n2. 从正确初始位置开始，拥有的汽油总是比消耗的汽油多,以此思想寻找初始位置\nvar canCompleteCircuit = function(gas, cost) {\n    let cur = 0,total = 0,start = 0;\n    for(let i = 0;i < gas.length;i++){\n        total += gas[i] - cost[i];\n        if(cur < 0){\n            cur = gas[i] - cost[i];\n            start = i;\n        }else cur += gas[i] - cost[i];\n    }\n    return total >= 0 ? start : -1;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"二分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二分"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("二分"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"思想-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思想-3"}},[t._v("#")]),t._v(" 思想")]),t._v(" "),e("p",[e("strong",[t._v("针对有序数列进行查找时，优先考虑二分")])]),t._v(" "),e("h4",{attrs:{id:"输入一个非递减排序的数组的一个旋转-输出旋转数组的最小元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入一个非递减排序的数组的一个旋转-输出旋转数组的最小元素"}},[t._v("#")]),t._v(" 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。\n// NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。\n//把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。\n//10111\n\n1. 原数据为旋转数组，所以分界点前后都是有序的\n2. 进行二分查找，注意因为找最小值，high赋值时应该从mid开始取，mid可能是最小值\nfunction minNumberInRotateArray(rotateArray)\n{\n    if(!rotateArray.length) return 0;\n    let left = 0,right = rotateArray.length-1;\n    while(left < right){\n        let mid = Math.floor((right+left) >> 1);\n        if(rotateArray[left] <= rotateArray[right]){\n            return rotateArray[left];\n        }\n        if(rotateArray[left] < rotateArray[mid]){\n            left = mid + 1;\n        }else if(rotateArray[right] > rotateArray[mid]){\n            right = mid;\n        }else{\n            left++;\n        }\n    }\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"统计一个数字在排序数组中出现的次数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统计一个数字在排序数组中出现的次数"}},[t._v("#")]),t._v(" 统计一个数字在排序数组中出现的次数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function GetNumberOfK(data, k)\n{\n    let low = 0,high = data.length-1;\n    let pos,count = 0;\n    while(low < high){\n        let mid = Math.floor((low+high)>>1);\n        if(data[mid] === k){\n            pos = mid;\n            break;\n        }else if(data[mid] < k){\n            low = mid + 1;\n        }else{\n            high = mid-1;\n        }\n    }\n    if(pos !== undefined){\n        count++;\n        let left = pos,right = pos;\n        while(left--){\n            if(data[left] === k){\n                count++;\n            }else{\n                break;\n            }\n        }\n        while(right++){\n            if(data[right] === k){\n                count++;\n            }else{\n                break;\n            }\n        }\n        return count;\n    }else return 0;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"_0-n-1中缺失的数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-n-1中缺失的数字"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fque-shi-de-shu-zi-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("0～n-1中缺失的数字"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var missingNumber = function(nums) {\n    let left = 0,\n        right = nums.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (mid === nums[mid]) {\n            left = mid + 1;\n        } else if (mid < nums[mid]) {\n            right = mid - 1;\n        }\n    }\n    return left;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"最长上升子序列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最长上升子序列"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Flongest-increasing-subsequence%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长上升子序列"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 维护一个子序列存放当前的上升序列\n2. 将当前数与子序列最大值比较，如果比最大值大之间加入队尾，如果更新则找一个合适的位置替换当前位置的元素\nvar lengthOfLIS = function(nums) {\n    let n = nums.length;\n    if(n <= 1){\n        return n;\n    }\n    let tail = [nums[0]];\n    for(let i = 0;i < n;i++){\n        if(nums[i] > tail[tail.length-1]){\n            tail.push(nums[i]);\n        }else{\n            let left = 0;\n            let right = tail.length-1;\n            while(left < right){\n                let mid = (left + right) >> 1;\n                if(tail[mid] < nums[i]){\n                    left = mid + 1;\n                }else{\n                    right = mid;\n                }\n            }\n            tail[left] = nums[i];\n        }\n    }\n    return tail.length;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"搜索二维矩阵-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搜索二维矩阵-ii"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsearch-a-2d-matrix-ii%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 搜索二维矩阵 II"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：")]),t._v(" "),e("p",[t._v("每行的元素从左到右升序排列。 每列的元素从上到下升序排列。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n1. 选取左下角的值作为初始值key\n2. 如果目标值大于key，因为是最左边的值（最小），所以col++\n3. 如果目标值小于，那么更小的值只可能是上一行，所以row--\nfunction Find(target,array){\n    let rows = array.length;\n    if(rows <= 0) return false;\n    let cols = array[0].length;\n    if(cols <= 0) return false;\n    let row = rows - 1;\n    let col = 0;\n    while(row >= 0 && col < cols){\n        if(array[row][col] > target){\n            row--;\n        }else if(array[row][col] < target){\n            col++;\n        }else{\n            return true;\n        }\n    }\n    return false;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"pow-x-n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pow-x-n"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fpowx-n%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pow(x, n)"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("实现 "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.cplusplus.com%2Freference%2Fvalarray%2Fpow%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("pow("),e("em",[t._v("x")]),t._v(", "),e("em",[t._v("n")]),t._v(")"),e("OutboundLink")],1),t._v(" ，即计算 x 的 n 次幂函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//快速幂算法\nvar myPow = function(x, n) {\n    if (!x) return 0;\n    if (x === 1) return 1;\n    if (x === -1) return (n & 1) ? -1 : 1;\n    if (n == 2147483647) return 0;\n    if (n == -2147483648) return x === 2 ? 0 : 1;\n    if (n < 0) {\n        x = 1 / x;\n        n = -n;\n    }\n    let res = 1;\n    while(n) {\n        if (n & 1) res *= x;\n        x *= x;\n        n >>= 1;\n    }\n    return res;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"求交集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#求交集"}},[t._v("#")]),t._v(" 求交集")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function intersection(...args){\n\tif(!args.length) return [];\n    let res = [],left = args[0][0],right = args[0][1];\n    for(let i = 1;i < args.length;i++){\n       if(right >= args[i][0] || left <= args[i][1]){\n         left = Math.max(left,args[i][0]);\n         right = Math.min(right,args[i][1]);\n         res = [left,right];\n       }else{\n        return [];\n       }\n     }\n   return res;\n}\n复制代码\n")])])]),e("h2",{attrs:{id:"回溯算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("回溯算法"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"解题思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),e("ol",[e("li",[t._v("全局变量：保存结果")]),t._v(" "),e("li",[t._v("参数：递归函数的参数选择，通常是两种参数。\n"),e("ul",[e("li",[t._v("状态变量： result需要保存的值")]),t._v(" "),e("li",[t._v("条件变量： 判断搜索是否完毕以及搜索是否合法")])])]),t._v(" "),e("li",[t._v("完成条件： 完成条件是决定状态变量和条件变量取何值时可以判断整个搜索流程结束。整个搜索流程结束有两个含义：搜索成功并保存结果何搜索失败并返回上一次状态。")]),t._v(" "),e("li",[t._v("递归过程： 传递当前状态给下一次递归进行搜索。")])]),t._v(" "),e("h3",{attrs:{id:"模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let res = [];   //存储结果\n\nfunction backtrack(path,condition,...){\n    if(judge(condition)){  //满足条件\n        res.push(path);\n        return;\n    }\n    for(let select of selectList){\n        if(剪枝条件) break;\n        path.push(select);  // 走某条路\n        backtrack(path,newSelectList);\n        path.pop(); //返回上一个十字路口\n    }\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"适用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),e("ol",[e("li",[t._v("排列，组合")]),t._v(" "),e("li",[t._v("数组，字符串，给定一个特定的规则，尝试找到某个解")]),t._v(" "),e("li",[t._v("二维数组下的DFS搜索")])]),t._v(" "),e("h3",{attrs:{id:"怎么套用模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么套用模板"}},[t._v("#")]),t._v(" 怎么套用模板")]),t._v(" "),e("p",[t._v("我筛选了"),e("code",[t._v("leetCode")]),t._v("中"),e("code",[t._v("hot")]),t._v("和面试常考题库中关于回溯的题目，题目由易到难，覆盖每个使用场景。")]),t._v(" "),e("h4",{attrs:{id:"子集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子集"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsubsets%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("子集"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一组"),e("strong",[t._v("不含重复元素")]),t._v("的整数数组 "),e("em",[t._v("nums")]),t._v("，返回该数组所有可能的子集（幂集）。")]),t._v(" "),e("ol",[e("li",[t._v("定义res数组存储结果")]),t._v(" "),e("li",[t._v("每个子集为状态变量，集合的元素个数为条件变量")]),t._v(" "),e("li",[t._v("子集的元素数量小于等于集合的元素数量为限制条件，满足条件时添加到结果数组，否则回退到上一步")]),t._v(" "),e("li",[t._v("下一层搜索的集合需要去掉已添加到状态变量中的元素")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var subsets = function(nums) {\n    let res = [];\n    let n = nums.length;\n    function back(path,i){\n        if(i <= n){\n            res.push(path);\n        }\n        for(let j = i;j < n;j++){\n            path.push(nums[j]);\n            back(path.slice(0),j+1);\n            path.pop();\n        }\n    }\n    back([],0);\n    return res;\n};\n复制代码\n")])])]),e("p",[t._v("针对这道题还有一种比较酷的解法，利用二进制")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("一个集合的右2^n个子集")])]),t._v(" "),e("li",[e("p",[t._v("使用二进制模拟，每位为取或不取")])]),t._v(" "),e("li",[e("p",[t._v("举个例子：[1,2,3]  => 符号位： 001  010  100  => 0-7与之&")]),t._v(" "),e("p",[t._v("=> [] [001] [010] [001,010] [100] [001,100] [010,100] [001,010,100] 刚好八种，并且对应数组下标。")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var subsets = function(nums) {\n    let n = 1 << nums.length;\n    let res = [];\n    for(let i = 0;i < n;i++){\n        let temp = [];\n        for(let j = 0;j < nums.length;j++){\n            if(i & (1 << j)){\n                temp.push(nums[j]);\n            }\n        }\n        res.push(temp);\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"全排列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全排列"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fpermutations%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("全排列"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个 "),e("strong",[t._v("没有重复")]),t._v(" 数字的序列，返回其所有可能的全排列。")]),t._v(" "),e("ol",[e("li",[t._v("定义res")]),t._v(" "),e("li",[t._v("每个排列序列为状态变量，排列序列中集合的个数为条件变量")]),t._v(" "),e("li",[t._v("当排列序列的元素个数等于给定序列时，满足条件")]),t._v(" "),e("li",[t._v("下一层递归依赖于上一层递归传递的路径")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var permute = function(nums) {\n    let len = nums.length;\n    let res = [];\n    \n    function back(path){\n        if(path.length === len){\n            res.push(path);\n            return;\n        }\n        for(let i = 0;i < len;i++){\n            if(path.indexOf(nums[i]) === -1){\t//这里的判断很精髓\n                path.push(nums[i]);\n                back(path.slice());\n                path.pop();\n            }\n        }\n    }\n    back([]);\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"组合总和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组合总和"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcombination-sum%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合总和"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。")]),t._v(" "),e("ol",[e("li",[t._v("定义res")]),t._v(" "),e("li",[t._v("每个子数组为状态变量，目标值为条件变量")]),t._v(" "),e("li",[t._v("子数组中的值相加等于目标值则满足要求")]),t._v(" "),e("li",[t._v("下一层递归的tar（与目标值相差的数目）依赖于上一层递归的选择")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var combinationSum = function(candidates, target) {\n    let res = [];\n    let len = candidates.length;\n    //这里排序是为了防止在for循环if判断时直接跳出了，比如这样的样例[8,7,4,3],11\n    candidates.sort((x,y) => x-y);\t\n    function back(path,i,tar){\n        if(tar === 0){\n            res.push(path);\n            return;\n        }\n        for(let j = i;j < len;j++){\n            //判断是否当前的路口都是通向死路\n            if(tar < candidates[j]) break;          \n            path.push(candidates[j]);\n            back(path.slice(),j,tar-candidates[j]);\n            path.pop();\n        }\n    }\n    back([],0,target);\n \n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"分割回文串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分割回文串"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fpalindrome-partitioning%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("分割回文串"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个字符串 "),e("em",[t._v("s")]),t._v("，将 "),e("em",[t._v("s")]),t._v(" 分割成一些子串，使每个子串都是回文串。")]),t._v(" "),e("p",[t._v("返回 "),e("em",[t._v("s")]),t._v(" 所有可能的分割方案。")]),t._v(" "),e("ol",[e("li",[t._v("定义res")]),t._v(" "),e("li",[t._v("状态变量为回文子串集，条件变量为子串集的字符串数目")]),t._v(" "),e("li",[t._v("当子串集的字符串数目与目标串长度相同时，满足要求")]),t._v(" "),e("li",[t._v("下层递归的开始位置由上层递归决定")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var partition = function(str){\n    let res = [];\n    function isPalindrome(s){\n        let head = 0;\n        let tail = s.length-1;\n        while(head <= tail){\n            if(s[head] !== s[tail]) return false;\n            head++;\n            tail--;\n        }\n        return true;\n    }\n    function backtrack(path,start){\n    if(start === str.length) res.push(path);\n        for(let i = start;i < str.length;i++){\n            if(!isPalindrome(str.slice(start,i+1))) continue;\n            path.push(str.slice(start,i+1));\n            backtrack(path.slice(),i+1);\n            path.pop();\n        }\n    }\n    backtrack([],0);\n    return res;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"单词搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单词搜索"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fword-search%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("单词搜索"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个二维网格和一个单词，找出该单词是否存在于网格中。")]),t._v(" "),e("p",[t._v("单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。")]),t._v(" "),e("ol",[e("li",[t._v("状态变量为一条通路，条件变量为通路的长度")]),t._v(" "),e("li",[t._v("当通路与目标词汇长度一致时，满足条件")]),t._v(" "),e("li",[t._v("下一层递归的初始坐标和通路长度由上层递归决定")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var exist = function (board, word) {\n  //越界处理\n  board[-1] = []\n  board.push([])\n\n  //寻找首个字母\n  for (let y = 0; y < board.length; y++) {\n    for (let x = 0; x < board.length; x++) {\n      if (word[0] === board[y][x] && backtrack(y, x, 0)) return true\n    }\n  }\n  \n  //回溯\n  function backtrack(y, x, i) {\n    //回溯终止\n    if (i + 1 === word.length) return true\n\n    //保存字母\n    var tmp = board[y][x]\n    board[y][x] = false\n\n    if (board[y][x + 1] === word[i + 1] && backtrack(y, x + 1, i + 1)) return true\n    if (board[y][x - 1] === word[i + 1] && backtrack(y, x - 1, i + 1)) return true\n    if (board[y + 1][x] === word[i + 1] && backtrack(y + 1, x, i + 1)) return true\n    if (board[y - 1][x] === word[i + 1] && backtrack(y - 1, x, i + 1)) return true\n\n    //复原字母\n    board[y][x] = tmp\n  }\n\n  return false\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"复原ip地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复原ip地址"}},[t._v("#")]),t._v(" 复原IP地址")]),t._v(" "),e("p",[t._v("给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。")]),t._v(" "),e("p",[t._v("有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 '.' 分隔。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var restoreIpAddresses = function(s) {\n    let res = [];\n    if(s.length < 4 || s.length > 12) return res;\n    function dfs(s, sub, index) {\n        if(s.length === 0 && index === 4) res.push(sub.slice(1)); // 去掉开头的.\n        if(s.length === 0 || index === 4) return;\n\n        // 一个数\n        dfs(s.slice(1), `${sub}.${s.slice(0,1)}`, index + 1);\n        if(s[0] !== '0' && s.length > 1) {\n            dfs(s.slice(2), `${sub}.${s.slice(0,2)}`, index + 1);   // 两个数\n            if(s.length > 2 && parseInt(s.slice(0,3)) <= 255) {\n                dfs(s.slice(3), `${sub}.${s.slice(0,3)}`, index + 1);   //三个数\n            }\n        }\n    }\n    dfs(s, '', 0);\n    return res;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"排序算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("排序算法"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"冒泡排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),e("p",[t._v("比较两个记录键值的大小，如果这两个记录键值的大小出现逆序，则交换这两个记录")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268eba8157dbde~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function bubbleSort(arr){\n    for(let i = 1;i < arr.length;i++){\n        for(let j = i;j > 0;j--){\n            if(arr[j] < arr[j-1]){\n                [arr[j],arr[j-1]] = [arr[j-1],arr[j]];\n            }\n        }\n    }\n    return arr;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"快排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快排"}},[t._v("#")]),t._v(" 快排")]),t._v(" "),e("p",[t._v("在n个记录中取某一个记录的键值为标准，通常取第一个记录键值为基准，通过一趟排序将待排的记录分为小于或等于这个键值的两个独立的部分，这是一部分的记录键值均比另一部分记录的键值小，然后，对这两部分记录继续分别进行快速排序，以达到整个序列有序")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268eba844a4e72~tplv-t2oaga2asx-watermark.awebp",alt:"1342782317_4426.jpg"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function quickSort(arr){\n    if(arr.length <= 1) return arr;\n    let right = [],left = [],keys = arr.shift();\n    for(let value of arr){\n        if(value > keys){\n            right.push(value)\n        }else{\n            left.push(value);\n        }\n    }\n    return quickSort(left).concat(keys,quickSort(right));\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"插入排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),e("p",[t._v("第i（i大于等于1）个记录进行插入操作时，R1、 R2，...，是排好序的有序数列，取出第i个元素，在序列中找到一个合适的位置并将她插入到该位置上即可。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268eba8b4d9ada~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function insertSort(arr){\n    for(let i = 1;i < arr.length;i++){\n        let j = i-1;\n        if(arr[i]<arr[j]){\n            let temp = arr[i];\n            while(j >= 0 && temp < arr[j]){\n                arr[j+1] = arr[j];\n                j--;\n            }\n            arr[j+1] = temp;\n        }\n    }\n    return arr;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"希尔排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[t._v("#")]),t._v(" 希尔排序")]),t._v(" "),e("p",[t._v("算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268eba8b57523b~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function hillSort(arr){\n    let len = arr.length;\n    for(let gap = parseInt(len >> 1);gap >= 1;gap = parseInt(gap >> 1)){\n        for(let i = gap;i < len;i++){\n            if(arr[i] < arr[i-gap]){\n                let temp = arr[i];\n                let j = i - gap;\n                while(j >= 0 && arr[j] > temp){\n                    arr[j+gap] = arr[j];\n                    j -= gap;\n                }\n                arr[j+gap] = temp;\n            }\n        }\n    }\n    return arr;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"选择排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),e("p",[t._v("在第i次选择操作中，通过n-i次键值间比较，从n-i+1个记录中选出键值最小的记录，并和第i（1小于等于1小于等于n-1）个记录交换")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268eba8426616c~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function selectSort(arr){\n    for(let i = 0;i < arr.length;i++){\n        let min = Math.min(...arr.slice(i));\n        let index = arr.indexOf(min);\n        [arr[i],arr[index]] = [arr[index],arr[i]];\n    }\n    return arr;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"堆排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebaae3e1b54~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function adjustMaxHeap(heap,head,heapSize){\n    let temp = heap[head];\n    let child = head * 2 + 1;\n    while(child < heapSize){\n        if(child+1 < heapSize && heap[child] < heap[child+1]) child++;\n        if(heap[head] < heap[child]){\n            heap[head] = heap[child];\n            head = child;\n            child = head * 2 + 1;\n        }else break;\n        heap[head] = temp;\n    }\n}\n\nfunction buildHeap(heap){\n    for(let i = (heap.length-1) >> 1;i >= 0;i--){\n        adjustMaxHeap(heap,i,heap.length);\n    }\n}\n\nfunction heapSort(arr){\n    buildHeap(arr);\n    for(let i = arr.length-1;i > 0;i--){\n        [arr[i],arr[0]] = [arr[0],arr[i]];\n        adjustMaxHeap(arr,0,i);\n    }\n    return arr;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"归并排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),e("p",[t._v("把一个有n个记录的无序文件看成是由n个长度为1的有序子文件组成的文件，然后进行两两归并")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebaae461abf~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function MergeSort(arr,left,right){\n    if(left >= right) return;\n    let mid = Math.floor((right - left) >> 1) + left;\n    MergeSort(arr,left,mid);\n    MergeSort(arr,mid+1,right);\n    Merge(arr,left,mid,right);\n    return arr;\n}\nfunction Merge(arr,left,mid,right){\n    let temp = [],i = 0;\n    let p1 = left,p2 = mid + 1;\n    while(p1 <= mid && p2 <= right){\n        arr[p1] <= arr[p2] ? temp[i++] = arr[p1++] : temp[i++] = arr[p2++];\n    }\n    while(p1 <= mid){\n        temp[i++] = arr[p1++];\n    }\n    while(p2 <= right){\n        temp[i++] = arr[p2++];\n    }\n    for(let i = 0;i < temp.length;i++){\n        arr[i+left] = temp[i];\n    }\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"桶排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#桶排序"}},[t._v("#")]),t._v(" 桶排序")]),t._v(" "),e("p",[t._v("把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function radixSort(arr,arrDomain,gropSize){\n    let data = [];\n    for(let i = 0;i < arr.length;i++) data.push([]);\n    console.log(data)\n    for(let i = 0;i < arr.length;i++){\n        data[Math.floor(parseInt(arr[i] / gropSize)) + 1].push(arr[i]);\n    }\n    for(let i = 0;i < data.length;i++){\n        quickSort(data[i]);\n    }\n    return data.flat(Infinity);\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"各排序算法的稳定性-时间复杂度-空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各排序算法的稳定性-时间复杂度-空间复杂度"}},[t._v("#")]),t._v(" 各排序算法的稳定性，时间复杂度，空间复杂度")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebaae4e7c11~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("h3",{attrs:{id:"系统自带排序实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统自带排序实现"}},[t._v("#")]),t._v(" 系统自带排序实现")]),t._v(" "),e("p",[t._v("每个语言的排序内部实现都是不同的。")]),t._v(" "),e("p",[t._v("对于 JS 来说，数组长度大于 10 会采用快排，否则使用插入排序。选择插入排序是因为虽然时间复杂度很差，但是在数据 量很小的情况下和 O(N * logN) 相差无几，然而插入排序需要的常数时间很小，所以相对别的排序来说更快。")]),t._v(" "),e("h3",{attrs:{id:"稳定性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#稳定性"}},[t._v("#")]),t._v(" 稳定性")]),t._v(" "),e("p",[t._v("稳定性的意思就是对于相同值来说，相对顺序不能改变。通俗的讲有两个相同的数 A 和 B，在排序之前 A 在 B 的前面， 而经过排序之后，B 跑到了 A 的前面，对于这种情况的发生，我们管他叫做排序的不稳定性。")]),t._v(" "),e("p",[t._v("稳定性有什么意义？个人理解对于前端来说，比如我们熟知框架中的虚拟 DOM 的比较，我们对一个``列表进行渲染， 当数据改变后需要比较变化时，不稳定排序或操作将会使本身不需要变化的东西变化，导致重新渲染，带来性能的损耗。")]),t._v(" "),e("h3",{attrs:{id:"排序面试题目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序面试题目"}},[t._v("#")]),t._v(" 排序面试题目")]),t._v(" "),e("ol",[e("li",[t._v("快速排序在完全无序的情况下效果最好，时间复杂度为O(nlogn)，在有序情况下效果最差，时间复杂度为O(n^2)。")]),t._v(" "),e("li",[t._v("外部排序常用的算法是归并排序。")]),t._v(" "),e("li",[t._v("数组元素基本有序的情况下，插入排序效果最好，因为这样只需要比较大小，不需要移动，时间复杂度趋近于O(n)。")]),t._v(" "),e("li",[t._v("如果只想得到1000个元素组成的序列中第5个最小元素之前的部分排序的序列，用堆排序方法最快。")]),t._v(" "),e("li",[t._v("对长度为 n 的线性表作快速排序，在最坏情况下，比较次数为 n(n-1)/2。")])]),t._v(" "),e("h3",{attrs:{id:"练习题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[t._v("#")]),t._v(" 练习题")]),t._v(" "),e("h4",{attrs:{id:"排序链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序链表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsort-list%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("排序链表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("在 "),e("em",[t._v("O")]),t._v("("),e("em",[t._v("n")]),t._v(" log "),e("em",[t._v("n")]),t._v(") 时间复杂度和常数级空间复杂度下，对链表进行排序。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var sortList = function(head) {\n    let mergeList = (left,right) => {\n        let res = new ListNode(0);\n        let pre = res;\n        while(left && right){\n            if(left.val <= right.val){\n                pre.next = left;\n                left = left.next;\n            }else{\n                pre.next = right;\n                right = right.next;\n            }\n            pre = pre.next;\n        }\n        pre.next = left ? left : right;\n        return res.next;\n    }\n    let mergeSort = (node) => {\n        if(!node || !node.next) return node;\n        let mid = node;\n        let fast = node.next;\n        while(fast && fast.next){\n            mid = mid.next;\n            fast = fast.next.next;\n        }\n        let rightList = mid.next;\n        mid.next = null;\n        let left = node;\n        let right = rightList;\n        return mergeList(mergeSort(left),mergeSort(right));\n    }\n    return mergeSort(head);\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"逆序对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逆序对"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F96bd6684e04a44eb80e6a68efc0ec6c5%3FtpId%3D13%26tqId%3D11188%26tPage%3D2%26rp%3D1%26ru%3D%2Fta%2Fcoding-interviews%26qru%3D%2Fta%2Fcoding-interviews%2Fquestion-ranking",target:"_blank",rel:"noopener noreferrer"}},[t._v("逆序对"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let count = 0;\nfunction InversePairs(data)\n{\n    if (data == null || data.length == 0) {\n        return 0;\n    }\n    MergeSort(data,0,data.length-1);\n    return count % 1000000007;\n}\nfunction MergeSort(arr,left,right){\n    if(left >= right) return;\n    let mid = Math.floor((right - left)>>1) + left;\n    MergeSort(arr,left,mid);\n    MergeSort(arr,mid+1,right);\n    Merge(arr,left,mid,right);\n}\n\nfunction Merge(arr,left,mid,right) {\n    let temp = [],i = 0;\n    let p1 = left,p2 = mid + 1;\n    while(p1 <= mid && p2 <= right){\n        if(arr[p1] <= arr[p2]){\n            temp[i++] = arr[p1++];\n        }else{\n            count += mid - p1 + 1;\n            temp[i++] = arr[p2++];\n        }\n    }\n    while(p1 <= mid){\n        temp[i++] = arr[p1++];\n    }\n    while(p2 <= right){\n        temp[i++] = arr[p2++];\n    }\n    for(let i = 0;i < temp.length;i++){\n        arr[i+left] = temp[i];\n    }\n}\n复制代码\n")])])]),e("h2",{attrs:{id:"并查集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("并查集"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("属于一种特殊的数据结构，在解决连通域问题上有着不错的性能。")]),t._v(" "),e("h3",{attrs:{id:"三个组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个组件"}},[t._v("#")]),t._v(" 三个组件")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("维护一个数组"),e("code",[t._v("let parents = []")]),t._v("，存放当前节点的父节点，根节点的父节点是它本身。")])]),t._v(" "),e("li",[e("p",[t._v("查询一个节点的根节点是哪个节点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function find(root){\n    let temp,son = root;\n    while(root !== parents[root]){\n        root = parents[root];\n    }\n    while(son !== root){\t//路径压缩，其实就是个扁平化处理的过程\n        temp = parents[son];\n        parents[son] = root;\n        son = temp;\n    }\n    return root;\n}\n\n//递归版\nfunction find(root){\n    if(root !== parents[root]) parents[root] = find(parents[root]);\n    return parents[root];\n}\n复制代码\n")])])])]),t._v(" "),e("li",[e("p",[t._v("合并两个连通域")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function join(x,y){\n    x = find(x);\n    y = find(y);\n\tif(x !== y){\n        parents[x] = y;\n    }\n}\n复制代码\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"练习题-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#练习题-2"}},[t._v("#")]),t._v(" 练习题")]),t._v(" "),e("h4",{attrs:{id:"岛屿数量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#岛屿数量"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fnumber-of-islands%2Fsolution%2Fdao-yu-shu-liang-by-leetcode%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("岛屿数量"),e("OutboundLink")],1)]),t._v(" "),e("ol",[e("li",[t._v("写三大组件，初始话parents时将其键和值对应")]),t._v(" "),e("li",[t._v("判定当前节点四周是否存在陆地，如果有就将他们连接起来，如果没有就将当前节点的父节点置反")]),t._v(" "),e("li",[t._v("求出parents数组中键和值依然相等的数目（即为连通域的数目）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var numIslands = function(grid) {\n    let row = grid.length;\n    if(row === 0) return 0;\n    let col = grid[0].length;\n    let parents = [];\n    for(let i = 0;i < row;i++){\n        for(let j = 0;j < col;j++){\n            parents[i*col+j] = i * col + j;\n        }\n    }\n    function find(root){\n        if(root !== parents[root]) parents[root] = find(parents[root]);\n        return parents[root];\n    }\n\n    function union(x,y){\n        x = find(x);\n        y = find(y);\n        if(x !== y){\n            parents[x] = y;\n        }\n    } \n    for(let i = 0;i < row;i++){\n        for(let j = 0;j < col;j++){\n            if(grid[i][j] === '1'){\n                i < row-1 && grid[i+1][j] === '1' && union((i+1)*col+j,i*col+j);\n                j < col-1 && grid[i][j+1] === '1' && union(i*col+j+1,i*col+j);\n            }else{\n                parents[i*col+j] = -parents[i*col+j];\n            }\n        }\n    }\n    return parents.filter((value,key) => (key === value && Object.is(key,value))).length;\n};\n复制代码\n")])])]),e("p",[t._v("DFS的解法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var numIslands = function(grid) {\n\tconst row = grid.length;\n\tif(!row) return 0;\n\tconst col = grid[0].length;\n\tlet res = 0;\n\tfor(let i = 0; i < row; i++) {\n\t\tfor(let j = 0; j < col; j++) {\n\t\t\tif(grid[i][j] === '1') {\n\t\t\t\tres++;\n\t\t\t\tdfs(grid, i, j);\n\t\t\t}\n\t\t}\n\t}\n\tfunction dfs(grid, i, j) {\n\t\tif(i < 0 || i >= row || j < 0 || j >= col) return;\n\t\tif(grid[i][j] === '1') {\n\t\t\tgrid[i][j] = '0';\n\t\t\tdfs(grid, i - 1, j);\n\t\t\tdfs(grid, i + 1, j);\n\t\t\tdfs(grid, i, j - 1);\n\t\t\tdfs(grid, i, j + 1);\n\t\t}\n\t}\n\treturn res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"被围绕的区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#被围绕的区域"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsurrounded-regions%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("被围绕的区域"),e("OutboundLink")],1)]),t._v(" "),e("ol",[e("li",[t._v("写三大组件")]),t._v(" "),e("li",[t._v("将"),e("code",[t._v("O")]),t._v("节点划分为内部节点和边界节点，引入一个虚拟边界root节点")]),t._v(" "),e("li",[t._v("判定"),e("code",[t._v("O")]),t._v("节点是否为内部节点，如果是则替换为"),e("code",[t._v("X")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var solve = function(board) {\n    let row = board.length;\n    if(row === 0) return board;\n    let col = board[0].length;\n    let parents = [];\n    for(let i = 0;i < row;i++){\n        for(let j = 0;j < col;j++){\n            parents[i*col+j] = i * col + j;\n        }\n    }\n    function find(root){\n        if(root !== parents[root]) parents[root] = find(parents[root]);\n        return parents[root];\n    }\n\n    function union(x,y){\n        x = find(x);\n        y = find(y);\n        if(x !== y){\n            parents[x] = y;\n        }\n    } \n    function isConnected(x,y){\n        return find(x) === find(y);\n    }\n    let virtualArea = row * col + 1;\n    for(let i = 0;i < row;i++){\n        for(let j = 0;j < col;j++){\n            if(board[i][j] === 'O'){\n                if(i === 0 || i === row-1 || j === 0 || j === col-1){\n                    union(i*col+j,virtualArea);\n                }else{\n                    i > 0 && board[i-1][j] === 'O' && union(i*col+j,(i-1)*col+j);\n                    i < row-1 && board[i+1][j] === 'O' && union(i*col+j,(i+1)*col+j);\n                    j > 0 && board[i][j-1] === 'O' && union(i*col+j,i*col+j-1);\n                    j < col-1 && board[i][j+1] === 'O' && union(i*col+j,i*col+j+1);\n                }\n            }\n        }\n    }\n    for(let i = 0;i < row;i++){\n        for(let j = 0;j < col;j++){\n            if(board[i][j] === 'O' && !isConnected(i*col+j,virtualArea)){\n                board[i][j] = 'X';\n            }\n        }\n    }\n    return board;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"拓扑排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("拓扑排序"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("对一个"),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE%2F10972513",target:"_blank",rel:"noopener noreferrer"}},[t._v("有向无环图"),e("OutboundLink")],1),t._v("(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边<u,v>∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个"),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E5%81%8F%E5%BA%8F%2F2439087",target:"_blank",rel:"noopener noreferrer"}},[t._v("偏序"),e("OutboundLink")],1),t._v("得到该集合上的一个"),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E5%85%A8%E5%BA%8F%2F10577699",target:"_blank",rel:"noopener noreferrer"}},[t._v("全序"),e("OutboundLink")],1),t._v("，这个操作称之为拓扑排序。不得不说百科的解释很专业，但就是不知道在说什么（wtcl）。")]),t._v(" "),e("h3",{attrs:{id:"举个例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#举个例子"}},[t._v("#")]),t._v(" 举个例子")]),t._v(" "),e("ol",[e("li",[t._v("对于有向无环图，我们首先找到一个入度为0的节点（随便找一个）")]),t._v(" "),e("li",[t._v("删除该节点，并将该节点的值存入结果数组，然后将该节点的所有邻接节点的入度减1")]),t._v(" "),e("li",[t._v("重新寻找一个入度为0的节点，再重复操作2")]),t._v(" "),e("li",[t._v("将剩余所有的入度为0的节点的值存入结果数组。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebac24b2c4d~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("h3",{attrs:{id:"怎么建图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么建图"}},[t._v("#")]),t._v(" 怎么建图")]),t._v(" "),e("p",[t._v("拓扑排序中涉及到节点的删除，所以采用邻接表的数据结构来表示图是比较不错的选择")]),t._v(" "),e("h4",{attrs:{id:"邻接表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#邻接表"}},[t._v("#")]),t._v(" 邻接表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//这里是一个简单的邻接表（面向试题编程），该结构在练习题部分有\nclass Node{\n    constructor(value){\n        this.value = value;\n        this.next = null;\n        this.in = 0;\t//记录入度\n    }\n}\nclass Graph{\n    constructor(nodeNum,edges){\n        this.list = new Array(nodeNum);\n        for(let i = 0;i < this.list.length;i++){\t//初始化邻接表\n            this.list[i] = new Node(i);\n        }\t\n        let v1,v2,newNode = null;\n        for(let edge of edges){\t//构建邻接表以及每个节点的入度数\n            [v2,v1] = edge;\n            newNode = new Node(v2);\n            newNode.next = this.list[v1].next;\n            this.list[v1].next = newNode;\n            this.list[v2].in++;\n        }\n    }\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"喜闻乐见的练习题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#喜闻乐见的练习题"}},[t._v("#")]),t._v(" 喜闻乐见的练习题")]),t._v(" "),e("h4",{attrs:{id:"课程表-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#课程表-ii"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcourse-schedule-ii%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("课程表 II"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("现在你总共有 n 门课需要选，记为 0 到 n-1。")]),t._v(" "),e("p",[t._v("在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]")]),t._v(" "),e("p",[t._v("给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。")]),t._v(" "),e("p",[t._v("可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。")]),t._v(" "),e("ol",[e("li",[t._v("建立邻接表")]),t._v(" "),e("li",[t._v("创建一个辅助栈存放入度为零的节点，一个存放结果的结果数组res和一个记录删除节点数目的计数器count")]),t._v(" "),e("li",[t._v("每次取辅助栈中的节点，将其所有的邻接节点入度减一并判断入度是否为零（从而添加到辅助栈中），将节点值放入res，count++")]),t._v(" "),e("li",[t._v("判定计数器是否与图的节点数相同，不相同证明有回路，按题目要求返回值就好")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Node{\n    constructor(value){\n        this.value = value;\n        this.next = null;\n        this.in = 0;\n    }\n}\nclass Graph{\n    constructor(nodeNum,edges){\n        this.list = new Array(nodeNum);\n        for(let i = 0;i < this.list.length;i++){\n            this.list[i] = new Node(i);\n        }\n        let v1,v2,newNode = null;\n        for(let edge of edges){\n            [v2,v1] = edge;\n            newNode = new Node(v2);\n            newNode.next = this.list[v1].next;\n            this.list[v1].next = newNode;\n            this.list[v2].in++;\n        }\n    }\n}\nvar findOrder = function(numCourses, prerequisites) {\n    let list = new Graph(numCourses,prerequisites).list;\n    let stack = [],res = [];\n    for(let node of list){\n        node.in === 0 && stack.push(node);\n    }\n    let count = 0;\n    while(stack.length){\n        let node = stack.pop();\n        count++;\n        res.push(node.value);\n        while(node.next){\n            (--list[node.next.value].in) === 0 && stack.push(list[node.next.value]);\n            node = node.next;\n        }\n    }\n    if(count !== list.length) return [];\n    else return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"课程表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#课程表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcourse-schedule%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("课程表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。")]),t._v(" "),e("p",[t._v("在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]")]),t._v(" "),e("p",[t._v("给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//上题的简化版，直接看代码吧\nclass Node{\n    constructor(value){\n        this.value = value;\n        this.next = null;\n        this.in = 0;\n    }\n}\nclass Graph{\n    constructor(nodeNum,edges){\n        this.list = new Array(nodeNum);\n        for(let i = 0;i < this.list.length;i++){\n            this.list[i] = new Node(i);\n        }\n        let v1,v2,newNode = null;\n        for(let edge of edges){\n            [v2,v1] = edge;\n            newNode = new Node(v2);\n            newNode.next = this.list[v1].next;\n            this.list[v1].next = newNode;\n            this.list[v2].in++;\n        }\n    }\n}\n\nvar canFinish = function(numCourses, prerequisites) {\n    let list = new Graph(numCourses,prerequisites).list;\n    let stack = [];\n    for(let node of list){\n        node.in === 0 && stack.push(node);\n    }\n    let count = 0;\n    while(stack.length){\n        let node = stack.pop();\n        count++;\n        while(node.next){\n            (--list[node.next.value].in) === 0 && stack.push(list[node.next.value]);\n            node = node.next;\n        }\n    }\n    return count === list.length\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("位运算"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"二进制中1的个数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制中1的个数"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fer-jin-zhi-zhong-1de-ge-shu-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 二进制中1的个数"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//n & (n-1)每次1的数量--\nvar hammingWeight = function(n) {\n    let count = 0;\n    while(n){\n        count++;\n        n = n & (n-1);\n    }\n    return count;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"数组中有一个数字出现的次数超过数组长度的一半-请找出这个数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组中有一个数字出现的次数超过数组长度的一半-请找出这个数字"}},[t._v("#")]),t._v(" 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。\n1. count初始化为0，count === 0时，res = 当前数，count++\n2. 当前数与res相同count++，否则count--\n3. 以上两步能够选出出现次数最多的数，接下来判断它是否超过一半即可\nfunction MoreThanHalfNum_Solution(numbers)\n{\n    let result,count=0;\n    for(let i = 0;i < numbers.length;i++){\n        if(count === 0){\n            result = numbers[i];\n            count++;\n        }else{\n            if(result === numbers[i]){\n                count++;\n            }else{\n                count--;\n            }\n        }\n    }\n    let times = numbers.filter(x => x === result).length;\n    return times > Math.floor(numbers.length >> 1) ? result : 0;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"只出现一次的数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#只出现一次的数字"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsingle-number%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("只出现一次的数字"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个"),e("strong",[t._v("非空")]),t._v("整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var singleNumber = function(nums) {\n    let num = nums[0];\n    for(let i = 1;i < nums.length;i++){\n        num ^= nums[i];\n    }\n    return num;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"比特位计数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比特位计数"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcounting-bits%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("比特位计数"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个非负整数 "),e("strong",[t._v("num")]),t._v("。对于 "),e("strong",[t._v("0 ≤ i ≤ num")]),t._v(" 范围中的每个数字 "),e("strong",[t._v("i")]),t._v(" ，计算其二进制数中的 1 的数目并将它们作为数组返回")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 奇数1的个数等于前一个偶数＋1\n2. 偶数1的个数等于当前偶数 >> 1 的值\nvar countBits = function(num) {\n    let res = [0];\n    for(let i = 1;i <= num;i++){\n        if(i & 1){\n            res[i] = res[i-1] + 1;\n        }else{\n            res[i] = res[i >> 1];\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"汉明距离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#汉明距离"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fhamming-distance%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉明距离"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("两个整数之间的"),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉明距离"),e("OutboundLink")],1),t._v("指的是这两个数字对应二进制位不同的位置的数目。")]),t._v(" "),e("p",[t._v("给出两个整数 "),e("code",[t._v("x")]),t._v(" 和 "),e("code",[t._v("y")]),t._v("，计算它们之间的汉明距离")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 亦或求出不同部分\n2. 统计\nvar hammingDistance = function(x, y) {\n    let ans = x ^ y,count = 0;\n    while(ans){\n        if(ans & 1) count++;\n        ans = ans >> 1;\n    }\n    return count;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"写一个函数-求两个整数之和-要求在函数体内不得使用-、-、-、-四则运算符号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写一个函数-求两个整数之和-要求在函数体内不得使用-、-、-、-四则运算符号"}},[t._v("#")]),t._v(" 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. ^ 不进位的加法\n2. & 判断进位点\n3. << 1 进位\nfunction Add(num1, num2)\n{\n    return num2 ? Add(num1 ^ num2,(num1 & num2) << 1) : num1;\n}\n复制代码\n")])])]),e("h2",{attrs:{id:"双指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("双指针"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("顾名思义，用两个指针进行查找，提高查找的效率")])]),t._v(" "),e("h3",{attrs:{id:"n数之和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#n数之和"}},[t._v("#")]),t._v(" n数之和")]),t._v(" "),e("h4",{attrs:{id:"两数之和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两数之和"}},[t._v("#")]),t._v(" 两数之和")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var twoSum = function(nums, target) {\n    if(!nums.length) return [];\n    let num = nums.slice(0);\n    nums.sort((x,y) => x-y);\n    let l = 0,r = nums.length-1;\n    while(l < r){\n        if(nums[l] + nums[r] === target) break;\n        else if(nums[l] + nums[r] < target){\n            l++;\n        }else{\n            r--;\n        }\n    }\n    l = num.indexOf(nums[l]);\n    r = num.indexOf(nums[r]) === l ? num.indexOf(nums[r],l+1) : num.indexOf(nums[r])\n    return [l,r];\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"三数之和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三数之和"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2F3sum%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("三数之和"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var threeSum = function(nums) {\n    if(nums.length < 3) return [];\n    nums.sort((x,y) => x-y);\n    let res = [];\n    for(let i = 0;i < nums.length;i++){\n        //如果第一个数大于1就没必要排了\n        if(nums[i] > 0) return res;\n        //去重\n        if(i && nums[i] === nums[i-1]) continue;\n        let left = i+1,right = nums.length-1;\n        while(left < right){\n            if(nums[left] + nums[right] + nums[i] === 0){\n                res.push([nums[i],nums[left],nums[right]]);\n                //去重\n                while(left < right && nums[left] === nums[left+1]){\n                    left++;\n                }\n                while(left < right && nums[right] === nums[right-1]){\n                    right--;\n                }\n                left++;\n                right--;\n            }else if(nums[left] + nums[right] + nums[i] > 0){\n                right--;\n            }else{\n                left++;\n            }\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"最接近的三数之和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最接近的三数之和"}},[t._v("#")]),t._v(" 最接近的三数之和")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//思路与前面基本一致，但需要两个变量，一个更新答案，一个更新最小差值\nvar threeSumClosest = function(nums, target) {\n    if(!nums.length) return 0;\n    let res = Infinity,mins = Infinity;\n    nums.sort((x,y) => x-y);\n    for(let i = 0;i < nums.length;i++){\n        let left = i + 1,right = nums.length-1;\n        while(left < right){\n            mins = Math.min(Math.abs(nums[i]+nums[left]+nums[right]-target),mins);\n            mins === Math.abs(nums[i]+nums[left]+nums[right]-target) \n            && (res = nums[i]+nums[left]+nums[right]);\n            if(nums[i]+nums[left]+nums[right] < target){\n                left++;\n            }else if(nums[i]+nums[left]+nums[right] > target){\n                right--;\n            }else{\n                break;\n            }\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h3",{attrs:{id:"雨水-容器类问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#雨水-容器类问题"}},[t._v("#")]),t._v(" 雨水，容器类问题")]),t._v(" "),e("h4",{attrs:{id:"盛最多水的容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#盛最多水的容器"}},[t._v("#")]),t._v(" 盛最多水的容器")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebad642da39~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//双指针时刻更新最大值即可,实质上还是枚举\nvar maxArea = function(height) {\n    if(!height.length) return 0;\n    let left = 0,right = height.length-1,res = 0;\n    while(left < right){\n        if(height[left] <= height[right]){\n            let cur = height[left] * (right - left);\n            res = Math.max(res,cur);\n            left++;\n        }else{\n            let cur = height[right] * (right - left);\n            res = Math.max(res,cur);\n            right--;\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"接雨水"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接雨水"}},[t._v("#")]),t._v(" 接雨水")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebae2b42e29~tplv-t2oaga2asx-watermark.awebp",alt:"iamge"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 比较巧妙的是如何获取每个单元格所能存放的雨水，可以有以下式子简单表示\n// 以左边为例：当前柱子存水量 = 最近最高柱子高度（只看左边到当前柱子） - 当前柱子高度\n// 右边同理\nfunction trap(arr){\n    if(!arr.length) return 0;\n    let left = 0,right = arr.length-1,leftHeight = 0,rightHeight = 0,res = 0;\n    while(left < right){\n        if(arr[left] < arr[right]){\n            leftHeight = Math.max(arr[left],leftHeight);\n            res += leftHeight - arr[left];\n            left++;\n        }else{\n            rightHeight = Math.max(arr[right],rightHeight);\n            res += rightHeight - arr[right];\n            right--;\n        }\n    }\n    return res;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"长度最小的子数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#长度最小的子数组"}},[t._v("#")]),t._v(" 长度最小的子数组")]),t._v(" "),e("p",[t._v("给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 滑动窗口的解法\n// 每次将右指针对应的数添加到临时num中\n// 查看是否满足题意，满足则作为一个可行解与len作比较，同时移动左指针\n// 移动右指针到下一个位置\n\nvar minSubArrayLen = function(s, nums) {\n    let left = 0, right = 0, len = Infinity, num = 0;\n    while(right < nums.length) {\n        num += nums[right];\n        while(num >= s) {\n            len = Math.min(len, right - left + 1);\n            num -= nums[left];\n            left++;\n        }\n        right++;\n    }\n    return len === Infinity ? 0 : len;\n};\n\n复制代码\n")])])]),e("h3",{attrs:{id:"链表类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链表类"}},[t._v("#")]),t._v(" 链表类")]),t._v(" "),e("h4",{attrs:{id:"删除链表的倒数第n个节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除链表的倒数第n个节点"}},[t._v("#")]),t._v(" 删除链表的倒数第n个节点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var removeNthFromEnd = function(head, n) {\n    if(!head) return null;\n    let fast = head,slow = head,pre = head,p1 = head,len = 0;\n    while(p1){\n        len++;\n        p1 = p1.next;\n    }\n    //注意头节点删除的情况\n    if(len === n) return head.next;\n    while(n--){\n        fast = fast.next;\n    }\n    while(fast){\n        fast = fast.next;\n        pre = slow;\n        slow = slow.next;\n    }\n    pre.next = slow.next;\n    return head;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"请判断一个链表是否为回文链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请判断一个链表是否为回文链表"}},[t._v("#")]),t._v(" 请判断一个链表是否为回文链表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 将前半部分链表反转\n2. 判断前后两部分链表是否相等\nvar isPalindrome = function(head) {\n    if(!head) return true;\n    let pre = null,temp,fast = head,slow = head;\n    while(fast && fast.next){\n        fast = fast.next.next;\n        // 反转链表\n        temp = slow;\n        slow = slow.next;\n        temp.next = pre;\n        pre = temp;\n    }\n    if(fast) slow = slow.next;\n    while(pre && slow){\n        if(pre.val !== slow.val) return false;\n        pre = pre.next;\n        slow = slow.next;\n    }\n    return true;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"给定一个链表-判断链表中是否有环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给定一个链表-判断链表中是否有环"}},[t._v("#")]),t._v(" 给定一个链表，判断链表中是否有环")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var hasCycle = function(head) {\n    if(!head || !head.next || !head.next.next) return false;\n    let fast = head.next.next,slow = head.next;\n    while(fast !== slow){\n        if(fast === null || fast.next === null) return false;\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return true;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"输入一个链表-输出该链表中倒数第k个结点。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入一个链表-输出该链表中倒数第k个结点。"}},[t._v("#")]),t._v(" 输入一个链表，输出该链表中倒数第k个结点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function FindKthToTail(head, k)\n{\n    // write code here\n    if(head === null || k === 0) return null;\n    let fast = head,slow = head;\n    while(k--){\n        if(fast === null) return null;\n        fast = fast.next;\n    }\n    while(fast){\n        fast = fast.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"输入两个单调递增的链表-输出两个链表合成后的链表-当然我们需要合成后的链表满足单调不减规则。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入两个单调递增的链表-输出两个链表合成后的链表-当然我们需要合成后的链表满足单调不减规则。"}},[t._v("#")]),t._v(" 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//注意与拷贝链表区分\nfunction Merge(pHead1, pHead2)\n{\n    if(pHead1 === null){\n        return pHead2;\n    }else if(pHead2 === null){\n        return pHead1;\n    }\n    if(pHead1.val < pHead2.val){\n        pHead1.next = Merge(pHead1.next,pHead2);\n        return pHead1;\n    }else{\n        pHead2.next = Merge(pHead2.next,pHead1);\n        return pHead2;\n    }\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"输入两个链表-找出它们的第一个公共结点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入两个链表-找出它们的第一个公共结点"}},[t._v("#")]),t._v(" 输入两个链表，找出它们的第一个公共结点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function FindFirstCommonNode(pHead1, pHead2)\n{\n    // write code here\n    let p1 = pHead1,p2 = pHead2;\n    while (p1 !== p2){\n        p1 = p1 === null ? pHead2 : p1.next;\n        p2 = p2 === null ? pHead1 : p2.next;\n    }\n    return p1;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"找出环形链表入环位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#找出环形链表入环位置"}},[t._v("#")]),t._v(" 找出环形链表入环位置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var detectCycle = function(head) {\n    if(!head || !head.next) return null;\n    let fast = head.next.next,slow = head.next,p1 = head;\n    while(fast !== null && fast !== slow){\n        if(fast.next) fast = fast.next.next;\n        else fast = null;\n        slow = slow.next;\n    }\n    if(fast === null) return null;\n    else{\n        while(p1 !== slow){\n            p1 = p1.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n};\n复制代码\n")])])]),e("h3",{attrs:{id:"字符串类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串类"}},[t._v("#")]),t._v(" 字符串类")]),t._v(" "),e("h4",{attrs:{id:"验证回文串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#验证回文串"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fvalid-palindrome%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("验证回文串"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var isPalindrome = function(s) {\n    let reg = /[a-z]|[0-9]/;\n    s = s.split('').map(x => x.toLowerCase()).filter((x) => reg.test(x)).join('');\n    let head = 0;\n    let tail = s.length-1;\n    while(head <= tail){\n        if(s[head] !== s[tail]) return false;\n        head++;\n        tail--;\n    }\n    return true;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"矩阵"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#矩阵"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("矩阵"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"顺时针打印矩阵"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#顺时针打印矩阵"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fshun-shi-zhen-da-yin-ju-zhen-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("顺时针打印矩阵"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n旋转魔方法，每次打印第一列，然后将矩阵逆时针旋转\nfunction rotate(arr){\n    if(!arr.length) return [];\n    let newArr = [];\n    for(let i = 0;i < arr[0].length;i++){\n        let temp = [];\n        for(let j = 0;j < arr.length;j++){\n            temp.push(arr[j][arr[0].length-1-i]);\n        }\n        newArr.push(temp);\n    }\n    return newArr;\n}\nfunction printMatrix(matrix)\n{\n    if(!matrix.length) return [];\n    let ans = [];\n    while(matrix.length){\n        for(let i = 0;i < matrix[0].length;i++){\n            ans.push(matrix[0][i])\n        }\n        matrix.splice(0,1);\n        matrix = rotate(matrix);\n    }\n    return ans;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"旋转图像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#旋转图像"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Frotate-image%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("旋转图像"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个 "),e("em",[t._v("n")]),t._v(" × "),e("em",[t._v("n")]),t._v(" 的二维矩阵表示一个图像。")]),t._v(" "),e("p",[t._v("将图像顺时针旋转 90 度")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var rotate = function(matrix) {\n    if(!matrix.length) return [];\n    let left = 0,right = matrix.length-1;\n    while(right-left > 0){\n        [matrix[left],matrix[right]] = [matrix[right],matrix[left]];\n        left++;\n        right--;\n    }\n    for(let i = 0;i < matrix.length;i++){\n        for(let j = i+1;j < matrix[i].length;j++){\n            [matrix[i][j],matrix[j][i]] = [matrix[j][i],matrix[i][j]];\n        }\n    }\n    return matrix;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"螺旋矩阵-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#螺旋矩阵-ii"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fspiral-matrix-ii%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 螺旋矩阵 II"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个正整数 "),e("em",[t._v("n")]),t._v("，生成一个包含 1 到 "),e("em",[t._v("n")]),t._v("2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//基本就是模拟这个过程，要注意转弯的边界条件\nvar generateMatrix = function(n) {\n    let rows = n-1,cols = n-1,col = 0,row = 0,iter = 1,x_dire = 1,y_dire = 1,cur_dire = 1,res = [];\n    for(let i = 0;i < n;i++) res.push([]);\n    while(iter <= n ** 2) {\n        if (cur_dire === 1 && res[row][col] === undefined) {\n            res[row][col] = iter;\n            iter++;\n            if (x_dire === 1) {\n                if (col < cols) {\n                    col++;\n                } else {\n                    cur_dire = -1;\n                    x_dire = -x_dire;\n                    if (y_dire === 1) row++;\n                    else row--;\n                }\n            } else {\n                if (col > 0) {\n                    col--;\n                } else {\n                    cur_dire = -1;\n                    x_dire = -x_dire;\n                    if (y_dire === 1) row++;\n                    else row--;\n                }\n            }\n        }else if (cur_dire === 1 && res[row][col]) {\n            if (y_dire === 1) row++;\n            else row--;\n            x_dire = -x_dire;\n            cur_dire = -1;\n            if (x_dire === 1) col++;\n            else col--;\n        }else if (cur_dire === -1 && res[row][col] === undefined) {\n            res[row][col] = iter;\n            iter++;\n            if (y_dire === 1) {\n                if (row < rows) {\n                    row++;\n                } else {\n                    cur_dire = 1;\n                    y_dire = -y_dire;\n                    if (x_dire === 1) col++;\n                    else col--;\n                }\n            } else {\n                if (row >= 0) {\n                    row--;\n                } else {\n                    cur_dire = 1;\n                    y_dire = -y_dire;\n                    if (x_dire === 1) col++;\n                    else col--;\n                }\n            }\n        } else if(cur_dire === -1 && res[row][col]) {\n            if (x_dire === 1) col++;\n            else col--;\n            y_dire = -y_dire;\n            cur_dire = 1;\n            if (y_dire === 1) row++;\n            else row--;\n        }\n    }\n    return res;\n};\n")])])]),e("h4",{attrs:{id:"矩阵置零"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#矩阵置零"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fset-matrix-zeroes%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("矩阵置零"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个 "),e("em",[t._v("m")]),t._v(" x "),e("em",[t._v("n")]),t._v(" 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用**"),e("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("原地"),e("OutboundLink")],1),t._v("**算法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//利用了js的特性，-0和0的不相等\n//将0所在行列中非0元素置为-0\nvar setZeroes = function(matrix) {\n    for(let i = 0;i < matrix.length;i++){\n        for(let j = 0;j < matrix[i].length;j++){\n            if(Object.is(matrix[i][j],0)){\n                for(let k = 0;k < matrix.length;k++){\n                    if(k !== i && Object.is(matrix[k][j],0)) continue;\n                    else matrix[k][j] = -0\n                }\n                for(let k = 0;k < matrix[i].length;k++){\n                    if(k !== j && Object.is(matrix[i][k],0)) continue;\n                    else matrix[i][k] = -0\n                }                \n            }\n        }\n    }\n    return matrix;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"杨辉三角"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#杨辉三角"}},[t._v("#")]),t._v(" 杨辉三角")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//入坑题\nfunction print(n) {\n    let arr = [],n1 = n;\n    while(n1--){\n        arr.push([]);\n    }\n    for(let i = 0;i < n;i++){\n        for(let j = 0;j <= i;j++){\n            if(j === 0 || j === i) arr[i][j] = 1;\n            else{\n                arr[i][j] = arr[i-1][j-1]+arr[i-1][j];\n            }\n        }\n    }\n    arr.forEach(x => console.log(x.toString().replace(/,/g,' ')));\n}\n复制代码\n")])])]),e("h2",{attrs:{id:"二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"遍历系列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#遍历系列"}},[t._v("#")]),t._v(" 遍历系列")]),t._v(" "),e("h4",{attrs:{id:"二叉树的前中后序遍历-递归和非递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的前中后序遍历-递归和非递归"}},[t._v("#")]),t._v(" 二叉树的前中后序遍历（递归和非递归）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//递归\nfunction pre(root){\n    if(!root) return root;\n    console.log(root.val);\n    pre(root.left);\n    pre(root.right);\n}\n\nfunction mid(root){\n    if(!root) return root;\n    mid(root.left);\n    console.log(root.val);\n    mid(root.right);\n}\n\nfunction next(root){\n    if(!root) return root;\n    next(root.right);\n    next(root.left);\n    console.log(root.val);\n}\n\n//非递归\n//前序\n//用栈进行模拟\n//每次将栈顶元素添加到结果中，然后将栈顶元素的左右非空子树入栈（注意右子树先入栈，后弹出）\n//直到栈为空跳出循环\nfunction pre(root){\n    if(root === null) return root;\n    let res = [],stack = [];\n    stack.push(root);\n    while (stack.length){\n        let node = stack.pop();\n        res.push(node.val);\n        node.right && stack.push(node.right);\n        node.left && stack.push(node.left);\n    }\n    return res;\n}\n\n//中序\n//对栈顶元素深度遍历左子树入栈，然后将栈顶添加到结果中，然后访问当前子节点的右子树，依次循环\nfunction mid(root){\n    if(root === null) return root;\n    let res = [],stack = [];\n    stack.push(root);\n    while (stack.length){\n        while(root !== null){\n            stack.push(root);\n            root = root.left;\n        }\n        let node = stack.pop()\n        res.push(node.val);\n        root = node.right;\n    }\n    //根节点添加了两次\n    return res.slice(0,res.length-1);\n}\n\n//后序\n//与前序相似，但生成顺序为根右左，最后将res反序\nfunction next(root){\n    if(root === null) return root;\n    let res = [],stack = [];\n    stack.push(root);\n    while (stack.length){\n        let node = stack.pop();\n        res.push(node.val);\n        node.left && stack.push(node.left);\n        node.right && stack.push(node.right);\n    }\n    return res.reverse();\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"层次遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#层次遍历"}},[t._v("#")]),t._v(" 层次遍历")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var levelOrder = function(root) {\n    if(!root) return [];\n    let nodes = [],queue = [root],path=[];\n    let cur = 1,next = 0;\n    while(queue.length){\n        let node = queue.shift();\n        path.push(node.val);\n        node.left && queue.push(node.left) && next++;\n        node.right && queue.push(node.right) && next++;\n        cur--;\n        if(!cur){\n            nodes.push(path);\n            path = [];\n            cur = next;\n            next = 0;\n        }\n    }\n    return nodes;\n};\n复制代码\n")])])]),e("h3",{attrs:{id:"遍历变种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#遍历变种"}},[t._v("#")]),t._v(" 遍历变种")]),t._v(" "),e("h4",{attrs:{id:"二叉树的锯齿形层次遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的锯齿形层次遍历"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fbinary-tree-zigzag-level-order-traversal%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的锯齿形层次遍历"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var zigzagLevelOrder = function(pRoot) {\n    if(!pRoot) {\n        return []\n    }\n    var queue = [], res = [], temp = [],\n        node, level = 0, toBePrinted = 1, isEven = true;\n    queue.push(pRoot);\n    while(queue.length) {\n        node = queue.shift();\n        // 判断当前行为奇数行还是偶数行\n        if(isEven) {\n            temp.push(node.val);\n        } else {\n            temp.unshift(node.val);\n        }\n        // 计算每一行的元素个数\n        if(node.left) {\n            queue.push(node.left);\n            level++;\n        }\n        if(node.right) {\n            queue.push(node.right);\n            level++;\n        }\n        toBePrinted--;\n        // 判断当前行是否全部输出完毕\n        if(toBePrinted === 0) {\n            res.push(temp);\n            temp = [];\n            toBePrinted = level;\n            level = 0;\n            isEven = !isEven;\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"从上到下按层打印二叉树-同一层结点从左至右输出。每一层输出一行。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从上到下按层打印二叉树-同一层结点从左至右输出。每一层输出一行。"}},[t._v("#")]),t._v(" 从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//相比bfs，需要增加两个变量，一个存当前层次的还有多少节点需要打印，一个存储下一层次有多少个节点（每次队列push时进行++）\nfunction Print(pRoot) {\n    let nodes = [],queue = [pRoot],path=[];\n    let cur = 1,next = 0;\n    while(queue.length){\n        let node = queue.shift();\n        path.push(node.val);\n        node.left && queue.push(node.left) && next++;\n        node.right && queue.push(node.right) && next++;\n        cur--;\n        if(!cur){\n            nodes.push(path);\n            path = [];\n            cur = next;\n            next = 0;\n        }\n    }\n    return nodes;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"根据已知二叉树-求某值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据已知二叉树-求某值"}},[t._v("#")]),t._v(" 根据已知二叉树，求某值")]),t._v(" "),e("h4",{attrs:{id:"求二叉树的深度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#求二叉树的深度"}},[t._v("#")]),t._v(" 求二叉树的深度")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function TreeDepth(pRoot)\n{\n    if(pRoot === null) return 0;\n    let left = TreeDepth(pRoot.left);\n    let right = TreeDepth(pRoot.right);\n    return Math.max(left,right) + 1;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"二叉搜索树中第k小的元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树中第k小的元素"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fkth-smallest-element-in-a-bst%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树中第K小的元素"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var kthSmallest = function(root, k) {\n    let res;\n    function midOrder(root){\n        if(!root) return root;\n        midOrder(root.left);\n        if(k === 0) return res;\n        else{\n            res = root.val;\n            k--;\n        }\n        midOrder(root.right);\n    }\n    midOrder(root);\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"二叉树最近公共祖先"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树最近公共祖先"}},[t._v("#")]),t._v(" 二叉树最近公共祖先")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("（1）深度优先查找，查到两节点任意一个返回\n（2）当两个节点都找到时返回root，否则返回null\nvar lowestCommonAncestor = function(root, p, q) {\n    if(!root) return null;\n    if(root === p || root === q) return root;\n    let left = lowestCommonAncestor(root.left,p,q);\n    let right = lowestCommonAncestor(root.right,p,q);\n    if(!left) return right;\n    if(!right) return left;\n    if(left && right) return root;  \n    return null;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"给定一棵二叉树-你需要计算它的直径长度。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给定一棵二叉树-你需要计算它的直径长度。"}},[t._v("#")]),t._v(" 给定一棵二叉树，你需要计算它的直径长度。")]),t._v(" "),e("p",[t._v("一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("易错点是直径可能不经过根节点\n用max保存最大值，\n当每个节点作为根节点时，与max比较进行更新\nvar diameterOfBinaryTree = function(root) {\n    let max = 0;\n    function dfs(root){\n        if(!root) return 0;\n        let l = dfs(root.left);\n        let r = dfs(root.right);\n        max = Math.max(max,l+r);\n        return Math.max(l,r)+1;\n    }\n    dfs(root);\n    return max;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"求根到叶子节点数字之和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#求根到叶子节点数字之和"}},[t._v("#")]),t._v(" 求根到叶子节点数字之和")]),t._v(" "),e("p",[t._v("给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。")]),t._v(" "),e("p",[t._v("例如，从根到叶子节点路径 1->2->3 代表数字 123。")]),t._v(" "),e("p",[t._v("计算从根到叶子节点生成的所有数字之和。")]),t._v(" "),e("p",[t._v("说明: 叶子节点是指没有子节点的节点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 简单的dfs\nvar sumNumbers = function(root) {\n  let res = 0;\n  function dfs(root,temp) {\n      if(!root) return;\n      temp += root.val;\n      if((!root.left) && (!root.right)) res += Number(temp);\n      dfs(root.left,temp);\n      dfs(root.right,temp);\n  }\n  dfs(root,'');\n  return res;\n};\n复制代码\n")])])]),e("h3",{attrs:{id:"一些特殊的二叉树-判断和构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些特殊的二叉树-判断和构建"}},[t._v("#")]),t._v(" 一些特殊的二叉树（判断和构建）")]),t._v(" "),e("h4",{attrs:{id:"判断二叉树是否是对称二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断二叉树是否是对称二叉树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsymmetric-tree%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("判断二叉树是否是对称二叉树"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function mirrors(root)\n{\n    if(root === null) return root;\n    [root.left,root.right] = [root.right,root.left];\n    mirrors(root.left);\n    mirrors(root.right);\n}\nvar isSymmetric = function(root) {\n    let mirror = JSON.parse(JSON.stringify(root));\n    mirrors(mirror);\n    if(JSON.stringify(mirror) === JSON.stringify(root)){\n        return true;\n    }else{\n        return false;\n    }\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"验证二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#验证二叉搜索树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fvalidate-binary-search-tree%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("验证二叉搜索树"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个二叉树，判断其是否是一个有效的二叉搜索树。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let pre = -Infinity;\nvar isValidBST = function(root) {\n    if(!root) return true;\n    let left = isValidBST(root.left);\n    if(root.val <= pre || !left) return false;\n    pre = root.val;\n    return isValidBST(root.right);\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"从前序与中序遍历序列构造二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从前序与中序遍历序列构造二叉树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fconstruct-binary-tree-from-preorder-and-inorder-traversal%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("从前序与中序遍历序列构造二叉树"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var buildTree = function(preorder, inorder) {\n    if(!preorder.length || !inorder.length) return null;\n    let root = new TreeNode(preorder[0]);\n    let key = 0;\n    for(let i = 0;i < inorder.length;i++){\n        if(inorder[i] === preorder[0]){\n            key = i;\n            break;\n        }\n    }\n    root.left = buildTree(preorder.slice(1,key+1),inorder.slice(0,key));\n    root.right = buildTree(preorder.slice(key+1),inorder.slice(key+1));\n    return root;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"翻转二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#翻转二叉树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Finvert-binary-tree%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("翻转二叉树"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var invertTree = function(root) {\n    if(root === null) return root;\n    [root.left,root.right] = [root.right,root.left];\n    invertTree(root.left);\n    invertTree(root.right);\n    return root;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"把二叉搜索树转换为累加树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把二叉搜索树转换为累加树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fconvert-bst-to-greater-tree%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("把二叉搜索树转换为累加树"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var convertBST = function(root) {\n    let cur = 0;\n    re = function(root){\n        if(!root) return root;\n        re(root.right);\n        root.val += cur;\n        cur = root.val;\n        re(root.left);\n        return root;\n    }\n    return re(root);\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"合并二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并二叉树"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fmerge-two-binary-trees%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并二叉树"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var mergeTrees = function(t1, t2) {\n    if(t1 && t2){\n        t1.val += t2.val;\n        t1.left = mergeTrees(t1.left,t2.left);\n        t1.right = mergeTrees(t1.right,t2.right);\n    }\n    return t1 || t2;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"输入两棵二叉树a-b-判断b是不是a的子结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入两棵二叉树a-b-判断b是不是a的子结构"}},[t._v("#")]),t._v(" 输入两棵二叉树A，B，判断B是不是A的子结构")]),t._v(" "),e("p",[t._v("（ps：我们约定空树不是任意一个树的子结构）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function TreeNode(x) {\n    this.val = x;\n    this.left = null;\n    this.right = null;\n}\n//判断是否为子结构跟先序遍历类似\nfunction isSubtree(root1,root2) {\n    if(!root2) return true;\n    if(!root1) return false;\n    if(root1.val !== root2.val) return false;\n    return isSubtree(root1.left,root2.left) && isSubtree(root1.right,root2.right);\n}\n//从根节点开始递归判断是否含有子结构\nfunction HasSubtree(pRoot1, pRoot2)\n{\n    if(!pRoot1 || !pRoot2) return false;\n    return (\n        isSubtree(pRoot1,pRoot2)\n        || HasSubtree(pRoot1.left,pRoot2)\n        || HasSubtree(pRoot1.right,pRoot2)\n    )\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"操作给定的二叉树-将其变换为源二叉树的镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作给定的二叉树-将其变换为源二叉树的镜像"}},[t._v("#")]),t._v(" 操作给定的二叉树，将其变换为源二叉树的镜像")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Mirror(root)\n{\n    if(root === null) return root;\n    [root.left,root.right] = [root.right,root.left];\n    Mirror(root.left);\n    Mirror(root.right);\n    return root;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"输入一棵二叉树-判断该二叉树是否是平衡二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入一棵二叉树-判断该二叉树是否是平衡二叉树"}},[t._v("#")]),t._v(" 输入一棵二叉树，判断该二叉树是否是平衡二叉树")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 比较两颗子树的高度，两边都取最大深度\n2. 查看两颗子树高度差是否相差为1\n3. 如果大于1，那么将其标记为-1（表示不是AVL树），然后每次递归时先判断该节点的子树是否时AVL树\nfunction IsBalanced_Solution(pRoot)\n{\n    return orderTree(pRoot) !== -1;\n}\nfunction orderTree(root) {\n    if(!root) return 0;\n    let left = orderTree(root.left);\n    let right = orderTree(root.right);\n    if(left === -1 || right === -1 || Math.abs(left-right) > 1) return -1;\n    return Math.max(left,right)+1;\n}\n复制代码\n")])])]),e("h3",{attrs:{id:"求二叉树的一些路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#求二叉树的一些路径"}},[t._v("#")]),t._v(" 求二叉树的一些路径")]),t._v(" "),e("h4",{attrs:{id:"路径总和-iii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路径总和-iii"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fpath-sum-iii%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("路径总和 III"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个二叉树，它的每个结点都存放着一个整数值。")]),t._v(" "),e("p",[t._v("找出路径和等于给定数值的路径总数。")]),t._v(" "),e("p",[t._v("路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。")]),t._v(" "),e("p",[t._v("二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function dfs(cur,sum,root,path,res){\n    cur += root.val;\n    path.push(root.val);\n    if(cur === sum && !root.left && !root.right){\n        res.push(path.slice(0));\n    }\n    root.left && dfs(cur,sum,root.left,path,res);\n    root.right && dfs(cur,sum,root.right,path,res);\n    path.pop();\n}\nvar pathSum = function(root, sum) {\n    if(!root) return [];\n    let res = [],path = [],cur = 0;\n    dfs(cur,sum,root,path,res);\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"二叉树中和为某一值的路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树中和为某一值的路径"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fer-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树中和为某一值的路径"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)\n1. dfs + 回溯\n2. 深度搜索路径，将路径中的每个节点值相加，路径存入缓存，直到遍历到最深处\n3. 比较当前值是否为目标值，如果是将缓存的路径加入结果数组，如果不是则回退到上一个节点\nfunction dfs(root,expectNumber,cur,path,result) {\n    cur += root.val;\n    path.push(root);\n    if(cur === expectNumber && root.left === null && root.right === null){\n        result.push(path.slice(0));\n    }\n    root.left && dfs(root.left,expectNumber,cur,path,result);\n    root.right && dfs(root.right,expectNumber,cur,path,result);\n    //重要\n    path.pop();\n}\nfunction FindPath(root, expectNumber)\n{\n    let result = [],path = [],cur = 0;\n    if(!root) return result;\n    dfs(root,expectNumber,cur,path,result);\n    return result;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"二叉树中的最大路径和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树中的最大路径和"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fbinary-tree-maximum-path-sum%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树中的最大路径和"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个"),e("strong",[t._v("非空")]),t._v("二叉树，返回其最大路径和。")]),t._v(" "),e("p",[t._v("本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径"),e("strong",[t._v("至少包含一个")]),t._v("节点，且不一定经过根节点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var maxPathSum = function(root) {\n    let max = -Infinity;\n    function dfs(root){\n        if(!root) return 0;\n        let l = Math.max(dfs(root.left),0);\n        let r = Math.max(dfs(root.right),0);\n        max = Math.max(max,l + r + root.val);\n        return Math.max(l,r)+root.val;\n    }\n    dfs(root);\n    return max;\n};\n复制代码\n")])])]),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),e("h4",{attrs:{id:"不同的二叉索引树的个数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同的二叉索引树的个数"}},[t._v("#")]),t._v(" 不同的二叉索引树的个数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("卡塔兰数\ndp[0] = 1\ndp[i] = dp[i-1] * (4 * i + 2) / (i + 2);\nvar numTrees = function(n) {\n    if(!n) return 0;\n    let dp = [1];\n    for(let i = 1;i < n;i++){\n        dp[i] = dp[i-1] * (4 * i + 2) /(i + 2);\n    }\n    return dp[n-1];\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"根据js的依赖关系树tree-输出合理的打包顺序的数组-阿里面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据js的依赖关系树tree-输出合理的打包顺序的数组-阿里面试题"}},[t._v("#")]),t._v(" 根据js的依赖关系树tree，输出合理的打包顺序的数组（阿里面试题）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function resolve(tree){\n    let len = tree.require.length,queue = [];\n    for(let i = 0;i < len;i++){\n        queue.push([]);\n    }\n    tree = flatten(tree);\n    let head = tree.name;\n    for(let key in tree){\n        let k = Number(key.slice(8,9));\n        Object.keys(tree[key]).length && queue[k].push(tree[key])\n    }\n    let res = [];\n    for(let i = queue.length-1;i >= 0;i--){\n        for(let j = queue[i].length-1;j >= 0;j--){\n            res.indexOf(queue[i][j]) === -1 && res.push(queue[i][j]);\n        }\n    }\n    return res;\n}\nfunction flatten(input) {\n    let res = {};\n    let re = function(obj,key){\n        if(obj instanceof Object && !(obj instanceof Array)){\n            let empty = true;\n            for(let i in obj){\n                re(obj[i],key ? `${key}.${i}` : i)\n            }\n            if(empty && key){\n                res[key] = {};\n            }\n        }else if(obj instanceof Array){\n            if(obj.length){\n                for(let i = 0;i < obj.length;i++){\n                    re(obj[i],key ? `${key}[${i}]` : i)\n                }\n            }else{\n                res[key] = [];\n            }\n        }else{\n            if(obj !== undefined && obj !== null){\n                res[key] = obj;\n            }\n        }\n    };\n    re(input,'');\n    return res;\n}\nvar tree1 = {\n    name: 'main.js',\n    require: [{\n        name: 'A.js'\n    }, {\n        name: 'B.js'\n    }] }\n\nvar tree2 = {\n    name: 'page.js',\n    require: [{\n        name: 'A.js',\n        require: [{\n            name: 'B.js',\n            require: [{\n                name: 'C.js'\n            }]\n        }]},\n        {\n            name: 'D.js',\n            require: [{\n                name: 'C.js'\n            }, {\n                name: 'E.js'\n            }]\n        }] }\nresolve(tree1) // ['A.js', 'B.js', 'main.js']\nresolve(tree2) // ['C.js', 'E.js', 'D.js', 'B.js', 'A.js', 'page.js']\n复制代码\n")])])]),e("h4",{attrs:{id:"输入一个整数数组-判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出yes-否则输出no。假设输入的数组的任意两个数字都互不相同。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入一个整数数组-判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出yes-否则输出no。假设输入的数组的任意两个数字都互不相同。"}},[t._v("#")]),t._v(" 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 后序遍历的最后一个节点为根节点\n2. 二叉索引树右子树大于根节点，左子树小于根节点，所以可以用根节点将树分为两颗子树\n3. 二叉索引树的子树也是二叉索引树，所以分别对子树进行判断，直到遍历到最后一个节点\nvar verifyPostorder = function(postorder) {\n    if(!postorder.length) return true;\n    let tail = postorder.pop();\n    let key = postorder.length;\n    for(let i = 0;i < postorder.length;i++){\n        if(postorder[i] > tail){\n            key = i;\n            break;\n        }\n    }\n    for(let i = key+1;i < postorder.length;i++){\n        if(postorder[i] < tail){\n            return false;\n        }\n    }\n    return verifyPostorder(postorder.slice(0));\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"输入一棵二叉搜索树-将该二叉搜索树转换成一个排序的双向链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入一棵二叉搜索树-将该二叉搜索树转换成一个排序的双向链表"}},[t._v("#")]),t._v(" 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var treeToDoublyList = function(root) {\n    if(!root) return null;\n    let head = null,tail = null,pre = null;\n    function dfs(root){\n        if(!root) return null;\n        dfs(root.left);\n        //第一个节点作为头节点\n        if(!pre) head = root;\n        //将上一个节点的后继指针指向当前节点\n        else pre.right = root;\n        //将当前指针的前驱指针指向上一个节点\n        root.left = pre;\n        //更新上一个节点\n        pre = root; \n        //更新尾部节点\n        tail = root;\n        dfs(root.right);\n    }\n    dfs(root);\n    //首尾连接\n    head.left = tail;\n    tail.right = head;\n    return head;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"二叉树展开为链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树展开为链表"}},[t._v("#")]),t._v(" 二叉树展开为链表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("前序遍历，将右子树放到左子树最右叶子节点的后面，将左子树放到右子树上，左子树置空\nvar flatten = function(root) {\n    function dfs(root){\n        if(!root) return;\n        dfs(root.left);\n        dfs(root.right);\n        let pre = root.left;\n        if(pre){\n            //获取左子树最右叶子节点\n            while(pre.right){\n                pre = pre.right;\n            }\n            //将右子树放在左子树最右右子节点后面\n            pre.right = root.right;\n            //将新构建的左子树放在右子树上\n            root.right = root.left;\n            //左子树置空\n            root.left = null;\n        }\n    }\n    dfs(root);\n    return root;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"哈希表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("哈希表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("面试中能用"),e("code",[t._v("hashmap")]),t._v("解的题往往有更优的解法，但"),e("code",[t._v("hashmap")]),t._v("不失为一种最容易想到和容易书写的解法")]),t._v(" "),e("h4",{attrs:{id:"每日温度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#每日温度"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fdaily-temperatures%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("每日温度"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。")]),t._v(" "),e("p",[t._v("例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。")]),t._v(" "),e("p",[t._v("提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var dailyTemperatures = function(T) {\n    let res = [],len = T.length;\n    while(len--){\n        res.push(0);\n    }\n    for(let i = 0;i < T.length;i++){\n        for(let j = i+1;j < T.length;j++){\n            if(T[j] <= T[i]){\n                res[i]++;\n                if(j === T.length-1) res[i] = 0;\n            }else{\n                res[i]++;\n                break;\n            }\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"字母异位词分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字母异位词分组"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fgroup-anagrams%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("字母异位词分组"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var groupAnagrams = function(strs) {\n    if(!strs.length) return [];\n    let str = strs.slice(0),res = [];\n    strs = strs.map(x => x.split('').sort().join(''));\n    let map = new Map();\n    for(let i = 0;i < strs.length;i++){\n        map.hasOwnProperty(strs[i]) ? map[strs[i]].push(str[i]) : (map[strs[i]] = [str[i]]); \n    }\n    for(let key in map){\n        res.push(map[key]);\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"和为k的子数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和为k的子数组"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fsubarray-sum-equals-k%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("和为K的子数组"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个整数数组和一个整数 **k，**你需要找到该数组中和为 "),e("strong",[t._v("k")]),t._v(" 的连续的子数组的个数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var subarraySum = function(nums, k) {\n    if(!nums.length) return 0;\n    let res = 0;\n    for(let i = 0;i < nums.length;i++){\n        let cur = 0;\n        for(let j = i;j < nums.length;j++){\n            cur += nums[j];\n            if(cur === k) res++;\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"前-k-个高频元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前-k-个高频元素"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Ftop-k-frequent-elements%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("前 K 个高频元素"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个非空的整数数组，返回其中出现频率前 "),e("em",[e("strong",[t._v("k")])]),t._v(" 高的元素")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var topKFrequent = function(nums, k) {\n    if(!nums.length) return [];\n    let map = new Map();\n    for(let i = 0;i < nums.length;i++){\n        map.has(nums[i]) ? map.set(nums[i],map.get(nums[i])+1) : map.set(nums[i],1);\n    }\n    let values = [],res = [];\n    for(let [k,i] of map){\n        values.push(i);\n    }\n    values.sort((x,y) => y-x);\n    values = values.slice(0,k);\n    for(let [k,i] of map){\n        if(values.indexOf(i) !== -1){\n            res.push(k);\n        }\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"在一个长度为n的数组里的所有数字都在0到n-1的范围内。-数组中某些数字是重复的-但不知道有几个数字是重复的。也不知道每个数字重复几次。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在一个长度为n的数组里的所有数字都在0到n-1的范围内。-数组中某些数字是重复的-但不知道有几个数字是重复的。也不知道每个数字重复几次。"}},[t._v("#")]),t._v(" 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\nfunction duplicate(numbers, duplication)\n{\n    let map = new Map();\n    for(let i = 0;i < numbers.length;i++){\n        map.has(numbers[i]) ? map.set(numbers[i],map.get(numbers[i]) + 1) : map.set(numbers[i],1);\n        if(map.get(numbers[i]) > 1){\n            duplication[0] = numbers[i];\n            return true;\n        }\n    }\n    return false;\n}\n\n复制代码\n")])])]),e("h4",{attrs:{id:"在一个字符串-0-字符串长度-10000-全部由字母组成-中找到第一个只出现一次的字符-并返回它的位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在一个字符串-0-字符串长度-10000-全部由字母组成-中找到第一个只出现一次的字符-并返回它的位置"}},[t._v("#")]),t._v(" 在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 如果没有则返回 -1（需要区分大小写）.\nfunction FirstNotRepeatingChar(str)\n{\n    let map = new Map();\n    for(let key of str){\n        map.has(key) ? map.set(key,map.get(key)+1) : map.set(key,1);\n    }\n    for(let [key,value] of map){\n        if(value === 1) return str.indexOf(key);\n    }\n    return -1;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"计数质数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计数质数"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcount-primes%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("计数质数"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("统计所有小于非负整数 "),e("em",[t._v("n")]),t._v(" 的质数的数量")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebae66e2f35~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("p",[t._v("给出要筛选数值的范围n，找出sqrt(n)以内的素数，先用 2 去筛，即把 2 留下，把 2 的倍数剔除掉；再用下一个素数，也就是 3 筛，把 3 留下，把 3 的倍数剔除掉；接下去用下一个素数 5 筛，把 5 留下，把 5 的倍数剔除掉；不断重复下去")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var countPrimes = function(n) {\n    let count = 0;\n    let signs = new Uint8Array(n);\n\n    for (let i = 2; i < n; i++) {\n        // 如果是素数\n        if (!signs[i - 1]) {\n            count++;\n            // 去除当前素数的n次项\n            for (let j = i * i; j <= n; j += i) {\n                signs[j - 1] = true;\n            }\n        }\n    }\n    return count;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"把只包含质因子2、3和5的数称作丑数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把只包含质因子2、3和5的数称作丑数"}},[t._v("#")]),t._v(" 把只包含质因子2、3和5的数称作丑数")]),t._v(" "),e("p",[t._v("返回第k个丑数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。\n1. 0-6都是丑数，返回其值即可\n2. 使用t1-t3表示2，3，5公因子的个数，每次取最小的公因子值，初值为1\nfunction GetUglyNumber_Solution(index)\n{\n    if(index < 7) return index;\n    let res = [1];\n    let t2 = 0,t3 = 0,t5 = 0;\n    for(let i = 1;i < index;i++){\n        res[i] = Math.min(res[t2]*2,res[t3]*3,res[t5]*5);\n        res[i] === res[t2]*2 && t2++;\n        res[i] === res[t3]*3 && t3++;\n        res[i] === res[t5]*5 && t5++;\n    }\n    return res[index-1]\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"无重复字符的最长子串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无重复字符的最长子串"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Flongest-substring-without-repeating-characters%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("无重复字符的最长子串"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个字符串，请你找出其中不含有重复字符的 "),e("strong",[t._v("最长子串")]),t._v(" 的长度。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var lengthOfLongestSubstring = function(s) {\n    if(!s.length) return '';\n    let sub = '',res = '';\n    for(let i = 0;i < s.length;i++){\n        if(sub === ''){\n            sub += s[i];\n            if(i === s.length-1 && res.length < sub.length) res = sub;\n        }else{\n            if(sub.indexOf(s[i]) === -1){\n                sub += s[i];\n                if(i === s.length-1 && res.length < sub.length) res = sub;\n            }else{\n                if(sub.length > res.length) res = sub;\n                sub = sub.substr(sub.indexOf(s[i])+1) + s[i];\n            }\n        }\n    }\n    return res.length;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"栈和队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈和队列"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("栈和队列"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("栈满足先进后出，队列满足先进先出")]),t._v(" "),e("h4",{attrs:{id:"用两个栈来实现一个队列-完成队列的push和pop操作。-队列中的元素为int类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用两个栈来实现一个队列-完成队列的push和pop操作。-队列中的元素为int类型"}},[t._v("#")]),t._v(" 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 用出入栈进行模拟\n2. 进队列全部添加到入栈中\n3. 出队列检查出栈是否为空，不为空则将栈顶元素出栈；为空则先将入栈中的所有元素压入出栈\nlet in_stack = [],out_stack = [];\n\nfunction push(value) {\n    in_stack.push(value);\n}\n\nfunction pop() {\n    if(!out_stack.length){\n        while(in_stack.length > 0){\n            out_stack.push(in_stack.pop())\n        }\n    }else{\n        return out_stack.pop();\n    }\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"定义栈的数据结构-请在该类型中实现一个能够得到栈中所含最小元素的min函数-时间复杂度应为o-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义栈的数据结构-请在该类型中实现一个能够得到栈中所含最小元素的min函数-时间复杂度应为o-1"}},[t._v("#")]),t._v(" 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 使用辅助栈存最小值\n2. 入栈时检查元素是否为最小值，若是则压入主栈和辅助栈\n3. 出栈时检查主栈栈顶元素是否与辅助栈一致，若是则一起弹出\n// 注意：保证测试中不会当栈为空的时候，对栈调用pop()或者min()或者top()方法。\nlet stack1 = [],stack2 = [];\nfunction push(value) {\n    if(value <= Math.min(...stack1) || stack1.length === 0){\n        stack1.unshift(value);\n        stack2.unshift(value);\n    }else{\n        stack1.unshift(value)\n    }\n}\n\nfunction pop() {\n    if(stack1.length > 0) {\n        if (stack1[0] === stack2[0]) {\n            stack1.shift();\n            stack2.shift();\n        } else {\n            stack1.shift();\n        }\n    }\n}\n\nfunction top() {\n    if(stack1.length > 0) {\n        return stack1[0];\n    }\n}\n\nfunction min() {\n    if(stack2.length > 0) {\n        return stack2[0];\n    }\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"滑动窗口的最大值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口的最大值"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fhua-dong-chuang-kou-de-zui-da-zhi-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("滑动窗口的最大值"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个数组 "),e("code",[t._v("nums")]),t._v(" 和滑动窗口的大小 "),e("code",[t._v("k")]),t._v("，请找出所有滑动窗口里的最大值。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 维护一个单调的双向队列\n2. 新增元素与队尾元素比较，比队尾小直接添加，比队尾大，弹出队尾，直到找到该元素合适的位置\n3. 每次将双向队列中队首元素添加到结果中\nvar maxSlidingWindow = function(nums, k) {\n    if (k === 0) return [];\n    const length = nums.length;\n    if (length === 0) return [];\n    const deque = [];\n    for (let i = 0; i < k; ++i) {\n        cleanDeque(deque, nums, i, k);\n        deque.push(i);\n    }\n    const res = [];\n    res.push(nums[deque[0]]);\n    for (let i = k; i < length; ++i) {\n        cleanDeque(deque, nums, i, k);\n        deque.push(i);\n        res.push(nums[deque[0]]);\n    }\n    return res;\n};\n\nfunction cleanDeque(queue, arr, cur, k) {\n    // 如果双向队列中，包含不是滑动窗口内的数，直接出队\n    if (queue.length && cur >= k + queue[0]) {\n        queue.shift();\n    }\n\n    while (queue.length && arr[idx] > nums[queue[queue.length - 1]]) {\n        queue.pop();\n    }\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"有效的括号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有效的括号"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fvalid-parentheses%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("有效的括号"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。")]),t._v(" "),e("p",[t._v("有效字符串需满足：")]),t._v(" "),e("p",[t._v("左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("左括号入栈，右括号与栈顶比较是否匹配，匹配弹出栈顶，不匹配return false\n查看栈是否为空\nvar isValid = function(s) {\n    if(!s.length) return true;\n    let stack = [];\n    for(let i = 0;i < s.length;i++){\n        if(s[i] === '(' || s[i] === '{' || s[i] === '['){\n            stack.unshift(s[i]);\n        }else{\n            if(s[i] === ')'){\n                if(stack[0] === '(') stack.shift();\n                else{\n                    return false;\n                }\n            }else if(s[i] === ']'){\n                if(stack[0] === '[') stack.shift();\n                else{\n                    return false;\n                }\n            }else if(s[i] === '}'){\n                if(stack[0] === '{') stack.shift();\n                else{\n                    return false;\n                }\n            }\n        }\n    }\n    return stack.length === 0;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"字符串解码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串解码"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fdecode-string%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串解码"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个经过编码的字符串，返回它解码后的字符串。")]),t._v(" "),e("p",[t._v("编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。")]),t._v(" "),e("p",[t._v("你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。")]),t._v(" "),e("p",[t._v("此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var decodeString = function(s) {\n    // 用两个栈来存放当前状态，前者是重复次数，后者是累积字符串\n    let repetStack=[],resStack=[];\n    //拼接字符串\n    let resStr = \"\";\n    //表示重复次数\n    let repet = 0;\n    // 遍历s\n    for(let i=0;i<s.length;i++){\n        let cur = s.charAt(i);\n        if(cur == '['){\n            //双双压入栈中,保存当前状态\n            repetStack.push(repet);\n            resStack.push(resStr);\n            //置空，准备下面的累积\n            repet = 0;\n            resStr = \"\";\n        }else if(cur == ']'){\n            // 取出当前重复次数栈中的值，也就是当前字符串的重复次数\n            let count = repetStack.pop();\n            // 根据重复次数生成重复字符串，赋值给temp，和resStr拼接\n            let temp = \"\";\n            for(let i = 0;i<count;i++){\n                temp += resStr;\n            }\n            // 和前面已经求得的字符串进行拼接\n            resStr = resStack.pop() + temp;\n        }else if(cur>='0' && cur<='9'){\n            // repet累积\n            repet = repet*10 + (cur-'0');\n        }else{\n            //字符累积\n            resStr += cur;\n        }\n    }\n    return resStr;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"根据身高重建队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据身高重建队列"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fqueue-reconstruction-by-height%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 根据身高重建队列"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 按升高降序，身高相同的按人数升序排列\n2. 将队列的每个元素按序插入到索引位置\nvar reconstructQueue = function(people) {\n    if(!people) return [];\n    people.sort((x,y)=>{\n        return x[0] === y[0] ? x[1]-y[1] : y[0] - x[0];\n    });\n    let res = [];\n    for(let i = 0;i < people.length;i++){\n        res.splice(people[i][1],0,people[i]);\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"中缀表达式转后缀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中缀表达式转后缀"}},[t._v("#")]),t._v(" 中缀表达式转后缀")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//数字直接添加到result\n//栈空，运算符直接入栈\n//遇到左括号直接入栈，遇到右括号栈顶元素添加到result中然后弹栈，依次循环直到遇到左括号，然后将左括号弹栈\n//遇到运算符，判断运算符与栈顶元素的优先级，将所有优先级大于等于该运算符的栈顶弹栈，然后入栈该运算符\n//将栈中剩余的字符添加到result中\nfunction toPoland(str){\n    let stack = [],result = '';\n    for(let i = 0;i < str.length;i++){\n        if(!Object.is(Number(str[i]),NaN)){\n            result += str[i];\n        }else if(stack.length === 0 && Object.is(Number(str[i]),NaN)){\n            result += ' ';\n            stack.push(str[i]);\n        }else if(str[i] === '('){\n            stack.push(str[i])\n        }else if(str[i] === ')'){\n            result += ' ';\n            while(stack[stack.length-1] !== '('){\n                result += stack.pop();\n            }\n            stack.pop();\n        }else if(str[i] === '*' || str[i] === '/'){\n            while(stack[stack.length-1] === '*' || stack[stack.length-1] === '/'){\n                result += ' ' + stack.pop();\n            }\n            result += ' ';\n            stack.push(str[i]);\n        }else if(str[i] === '+' || str[i] === '-'){\n            while(stack[stack.length-1] === '*' || stack[stack.length-1] === '/' || stack[stack.length-1] === '+' || stack[stack.length-1] === '-'){\n                result += ' ' + stack.pop();\n            }\n            result += ' ';\n            stack.push(str[i]);\n        }\n    }\n    while(stack.length){\n        result += ' ' + stack.pop();\n    }\n    return result;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"计算后缀表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算后缀表达式"}},[t._v("#")]),t._v(" 计算后缀表达式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 数字入栈\n2. 运算符，栈顶作为右操作数，次栈顶作为左操作数\n3. 将运算结果入栈\n4. 栈最后一个值即为结果\nfunction CalcRPN(str) {\n    let stack = [];\n    let num = '';\n    for(let i = 0;i < str.length;i++){\n        if(str[i] === ' '){\n            if(num !== '') stack.push(Number(num));\n            num = '';\n        }else if(!Object.is(Number(str[i]),NaN)){\n            num += str[i];\n        }else if(str[i] === '+'){\n            let right = stack.pop();\n            let left = stack.pop();\n\n            stack.push(left + right);\n        }else if(str[i] === '-'){\n            let right = stack.pop();\n            let left = stack.pop();\n            stack.push(left - right);\n        }else if(str[i] === '*'){\n            let right = stack.pop();\n            let left = stack.pop();\n            stack.push(left * right);\n        }else if(str[i] === '/'){\n            let right = stack.pop();\n            let left = stack.pop();\n            stack.push(left / right);\n        }\n    }\n    return stack.pop();\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"输入两个整数序列-第一个序列表示栈的压入顺序-请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入两个整数序列-第一个序列表示栈的压入顺序-请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。"}},[t._v("#")]),t._v(" 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 模拟出栈的过程\n2. 变量push栈，每次将一个元素压入辅助栈\n3. 判断辅助栈是否为空的同时，pop栈的栈顶是否与辅助栈栈顶元素相同，如果都满足则两者出栈\n4. 最后判断辅助栈是否为空\n// 例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。\n// （注意：这两个序列的长度是相等的）\n\nfunction IsPopOrder(pushV, popV) {\n    let stack = [],k = 0;\n    for(let i = 0;i < pushV.length;i++){\n        stack.unshift(pushV[i]);\n        while(stack[0] && popV[k] && stack[0] === popV[k]){\n            stack.shift();\n            k++;\n        }\n    }\n    return stack.length === 0;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"数组中的第k个最大元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组中的第k个最大元素"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fkth-largest-element-in-an-array%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组中的第K个最大元素"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 优先队列。。写的有点蛋疼\nvar findKthLargest = function(nums, k) {\n    let queue = [];\n    for(let i = 0;i < nums.length;i++){\n        if(queue.length < k) {\n           let pos = 0;\n           while(pos < k) {\n               if(queue[pos] === undefined) {\n                    queue[pos] = nums[i];\n                    break;\n               } else {\n                   if(nums[i] > queue[pos]) {\n                       queue.splice(pos,0,nums[i]);\n                       break;\n                   }\n               }\n               pos++;\n           }\n        } else {\n            if(nums[i] > queue[k-1]) {\n                let pos = 0;\n                while(pos < k) {\n                    if(nums[i] > queue[pos]) {\n                       queue.splice(pos,0,nums[i]);\n                       queue.pop();\n                       break;\n                    }\n                    pos++;\n                }                \n            }\n        }\n    }\n    return queue[k-1];\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("链表"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"反转链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反转链表"}},[t._v("#")]),t._v(" 反转链表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function ReverseList(pHead)\n{\n    // write code here\n    if(pHead === null || pHead.next === null) return pHead;\n    let pre = null,nex = null;\n    while(pHead !== null){\n        nex = pHead.next;\n        pHead.next = pre;\n        pre = pHead;\n        pHead = nex;\n    }\n    return pre;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"复杂链表的复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复杂链表的复制"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Ffu-za-lian-biao-de-fu-zhi-lcof%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("复杂链表的复制"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("请实现一个函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Clone(pHead)\n{\n    // write code here\n    if(pHead === null) return pHead;\n    let p1 = pHead;\n    while(p1 !== null){\n        let node = new RandomListNode(p1.label);\n        node.next = p1.next;\n        p1.next = node;\n        p1 = node.next;\n    }\n    p1 = pHead;\n    while(p1 !== null){\n        let node = p1.next;\n        if(p1.random) node.random = p1.random.next;\n        p1 = node.next;\n    }\n    p1 = pHead;\n    let p2 = pHead.next;\n    while(p1.next !== null){\n        let node = p1.next;\n        p1.next = node.next;\n        p1 = node;\n    }\n    return p2;\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"合并两个有序链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并两个有序链表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fmerge-two-sorted-lists%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并两个有序链表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var mergeTwoLists = function(l1, l2) {\n    if(!l1) return l2;\n    if(!l2) return l1;\n    if(!l1 && !l2) return null;\n    if(l1.val <= l2.val){\n        l1.next = mergeTwoLists(l1.next,l2);\n        return l1;\n    }else{\n        l2.next = mergeTwoLists(l1,l2.next);\n        return l2;\n    }\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"环形链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环形链表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Flinked-list-cycle%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("环形链表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个链表，判断链表中是否有环")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var hasCycle = function(head) {\n    if(!head || !head.next || !head.next.next) return false;\n    let fast = head.next.next,slow = head.next;\n    while(fast !== slow){\n        if(fast === null || fast.next === null) return false;\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return true;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"环形链表-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环形链表-ii"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Flinked-list-cycle-ii%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("环形链表 II"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 "),e("code",[t._v("null")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var detectCycle = function(head) {\n    if(!head || !head.next) return null;\n    let fast = head.next.next,slow = head.next,p1 = head;\n    while(fast !== null && fast !== slow){\n        if(fast.next) fast = fast.next.next;\n        else fast = null;\n        slow = slow.next;\n    }\n    if(fast === null) return null;\n    else{\n        while(p1 !== slow){\n            p1 = p1.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"相交链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相交链表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fintersection-of-two-linked-lists%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("相交链表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("编写一个程序，找到两个单链表相交的起始节点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var getIntersectionNode = function(headA, headB) {\n    var pA = headA;\n    var pB = headB;\n    while(pA !== pB){\n        pB = pB? pB.next: headA;\n        pA = pA? pA.next: headB;\n    }\n    return pA;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"复制带随机指针的链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制带随机指针的链表"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fcopy-list-with-random-pointer%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("复制带随机指针的链表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var copyRandomList = function(pHead) {\n    if(pHead === null) return pHead;\n    let p1 = pHead;\n    while(p1 !== null){\n        let node = new Node(p1.val);\n        node.next = p1.next;\n        p1.next = node;\n        p1 = node.next;\n    }\n    p1 = pHead;\n    while(p1 !== null){\n        let node = p1.next;\n        if(p1.random) node.random = p1.random.next;\n        p1 = node.next;\n    }\n    p1 = pHead;\n    let p2 = pHead.next;\n    while(p1.next !== null){\n        let node = p1.next;\n        p1.next = node.next;\n        p1 = node;\n    }\n    return p2;\n};\n复制代码\n")])])]),e("h2",{attrs:{id:"字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"电话号码的字母组合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#电话号码的字母组合"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fletter-combinations-of-a-phone-number%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("电话号码的字母组合"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个仅包含数字 "),e("code",[t._v("2-9")]),t._v(" 的字符串，返回所有它能表示的字母组合。")]),t._v(" "),e("p",[t._v("给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/31/17268ebae41ae71b~tplv-t2oaga2asx-watermark.awebp",alt:"image"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 这个回溯可以说很巧妙了，lc上有详解\nvar letterCombinations = function(digits) {\n    if(!digits) return [];\n    let map = {\n        '2': 'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'\n    };\n    let res = [];\n    function dfs(index,path) {\n        if(index === digits.length) {\n            res.push(path);\n            return;\n        }\n        for (let i = 0;i < map[digits[index]].length;i++) {\n            path += map[digits[index]][i];\n            dfs(index+1,path.slice());\n            path = path.slice(0, path.length-1);\n        }\n    }\n    dfs(0,'');\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"回文子串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回文子串"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fpalindromic-substrings%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("回文子串"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。")]),t._v(" "),e("p",[t._v("具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var countSubstrings = function(s) {\n    let s2 = s.split('').reverse().join('');\n    let sum = 0;\n    const len = s.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j <= len; j++) {\n            if (s.substr(i, j - i) === s2.substr(len - j, j - i)) {\n                sum += 1\n            }\n        }\n    }\n    return sum;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"括号生成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#括号生成"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fgenerate-parentheses%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("括号生成"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("数字 "),e("em",[t._v("n")]),t._v(" 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 "),e("strong",[t._v("有效的")]),t._v(" 括号组合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var generateParenthesis = function(n) {\n    if(!n) return [];\n    let res = [];\n    function dfs(subs,left,right,n){\n        if(left === n && right === n){\n            res.push(subs);\n            return;\n        }\n        if(left < right){\n            return;\n        }\n        left < n && dfs(subs+'(',left+1,right,n);\n        right < n && dfs(subs+')',left,right+1,n);\n    }\n    dfs('',0,0,n);\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"最长公共前缀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最长公共前缀"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Flongest-common-prefix%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长公共前缀"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("编写一个函数来查找字符串数组中的最长公共前缀。")]),t._v(" "),e("p",[t._v("如果不存在公共前缀，返回空字符串 "),e("code",[t._v('""')])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var longestCommonPrefix = function(strs) {\n    if(!strs.length) return '';\n    strs.sort();\n    let a = strs[0],b = strs[strs.length-1],res = '';\n    for(let i = 0;i < a.length;i++){\n        if(i < b.length && a[i] === b[i]){\n            res += a[i];\n        }else break;\n    }\n    return res;\n};\n复制代码\n")])])]),e("h4",{attrs:{id:"密码解密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#密码解密"}},[t._v("#")]),t._v(" 密码解密")]),t._v(" "),e("p",[t._v("小明从老板那里拿到了一个密码表，说是如果解开密码表中的秘密，就可以升职加薪，赢取白富美，走向人生巅峰。这个密码表是一个 CSV 文件，里面的数据由数字（没有小数点）、字母组成。小明需要提取每个数据中的数字（例如 "),e("code",[t._v("1a2b3c")]),t._v(" 提取后得到 "),e("code",[t._v("123")]),t._v("，提取后的数字整体看作一个十进制数），把数值为奇数的项相加，就可以解开这个秘密。请你实现一个函数 sum，帮小明完成这项工作。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function sum(input: string) {\n\n  return input.split(/[,\\n]/)\n\n    .map(item => Number(item.replace(/[a-z]/ig, "")))\n\n    .filter(num => num % 2 === 1)\n\n    .reduce((a, b) => a + b)\n\n}\n复制代码\n')])])]),e("h4",{attrs:{id:"解析url参数为对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析url参数为对象"}},[t._v("#")]),t._v(" 解析url参数为对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function parseUrl(url){\n    url = decodeURIComponent(url);\n    let strs = url.slice(url.indexOf('?')+1).split('&');\n    return strs.reduce((x,y)=>{\n        let key = y.split('=')[0];\n        let value = Object.is(Number(y.split('=')[1]),NaN) ? y.split('=')[1] : Number(y.split('=')[1]);\n        x[key] = value;\n        return x;\n    },{});\n}\n复制代码\n")])])]),e("h4",{attrs:{id:"实现模板引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现模板引擎"}},[t._v("#")]),t._v(" 实现模板引擎")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const template = 'there are ${count} ${name} on the ${place}.';\nfunction parse(template,obj){\n    let reg = /\\$\\{((\\w|_|\\$)*)\\}/g;\n    let keys = template.match(reg).map(x => x.slice(2,x.length-1));\n    let value = keys.map(i => obj[i] === undefined ? '' : String(obj[i]));\n    return template.replace(reg,()=> value.shift());\n}\nconsole.log(parse(template, {count: 2, name: 'apples', place: 'table'}, create));\n\n//there are 2 apples on the table.\n复制代码\n")])])]),e("h4",{attrs:{id:"html任意标签字符串转成json文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html任意标签字符串转成json文件"}},[t._v("#")]),t._v(" HTML任意标签字符串转成json文件")]),t._v(" "),e("p",[t._v("修改了之前的错误代码，整体思路如下：")]),t._v(" "),e("ol",[e("li",[t._v("将HTML字符串去<>,处理为一个数组")]),t._v(" "),e("li",[t._v("提取树形结构")]),t._v(" "),e("li",[t._v("将树形结构转JSON")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const str1 = '<div>1<span>2<a>3</a>4</span>5<span>6<a>7</a>8<a>9</a>10</span>11</div>';\nfunction Dom2JSON(str) {\n    str = str.split('<').map(x => x.split('>'));\n    let res = [],stack = [],temp = {},cur = {},key = 0;\n    // 获取树形结构\n    for(let i = 1;i < str.length; i++) {\n        if (str[i][0].indexOf('/') === -1) {\n            temp = {};\n            temp['key'] = key++;\n            temp['tag'] = str[i][0];\n            temp['value'] = str[i][1];\n            temp['children'] = [];\n            temp['parent'] = stack.length === 0 ? 0 : stack[0]['key'];\n            stack.unshift(temp);\n        } else {\n            cur = stack.shift();\n            // 当前元素为根元素时栈为空\n            stack.length !== 0 && (stack[0]['value'] = stack[0]['value'] + cur['value'] + str[i][1]);\n            res.unshift(cur);\n        }\n    }\n    // 使得遍历时索引与key值匹配\n    res = res.sort((x, y) => x['key'] - y['key']);\n    for (let i = res.length - 1;i > 0;i--) {\n        temp = {};\n        temp['tag'] = res[i]['tag'];\n        temp['value'] = res[i]['value'];\n        temp['children'] = res[i]['children'];\n        res[res[i]['parent']]['children'].unshift(temp);\n    }\n    res = res[0];\n    delete res['parent'];\n    delete res['key'];\n    return JSON.parse(JSON.stringify(res));\n}\nconsole.log(Dom2JSON(str1));\n}\n// 转换结果如下\n// let res ={\n//     tag: \"div\",\n//     value: \"1234567891011\",\n//     children: [\n//         {\n//             tag: \"span\",\n//             value: \"234\",\n//             children: [\n//                 {\n//                     tag: \"a\",\n//                     value: \"3\",\n//                     children: [],\n//                 }\n//             ],\n//         },\n//         {\n//             tag: \"span\",\n//             value: \"678910\",\n//             children: [\n//                 {\n//                     tag: \"a\",\n//                     value: \"7\",\n//                     children: [],\n//                 },\n//                 {\n//                     tag: \"a\",\n//                     value: \"9\",\n//                     children: [],\n//                 }\n//             ]\n//         }\n//     ]}\n\n复制代码\n")])])]),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")])])}),[],!1,null,null,null);n.default=a.exports}}]);