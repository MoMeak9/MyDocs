(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{733:function(t,a,s){"use strict";s.r(a);var e=s(5),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"l19-shortest-path-algorithms-最短路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#l19-shortest-path-algorithms-最短路径"}},[t._v("#")]),t._v(" L19 Shortest Path Algorithms 最短路径")]),t._v(" "),s("p",[s("strong",[t._v("Single-Source Shortest Path Problem:")]),t._v("\nIt is a shortest path problem where the shortest path from a given source vertex to all other remaining vertices is computed.\nDijkstra’s Algorithm and Bellman Ford Algorithm are the famous algorithms used for solving single-source shortest path problem.")]),t._v(" "),s("p",[t._v("**relaxation 松弛法：**这些方法会通过逐步接近的方式获得相关问题的最佳解法。每运用一次松弛法就好像我们“移动”了一次，而我们要做的就是在尽可能少的移动次数内找到最佳解决方案。")]),t._v(" "),s("h3",{attrs:{id:"dijkstra-s-algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-s-algorithm"}},[t._v("#")]),t._v(" Dijkstra’s Algorithm")]),t._v(" "),s("p",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164217895.png",alt:"image-20210706164217895"}}),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164222649.png",alt:"image-20210706164222649"}})]),t._v(" "),s("p",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164236501.png",alt:"image-20210706164236501"}}),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164242032.png",alt:"image-20210706164242032"}})]),t._v(" "),s("p",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164248362.png",alt:"image-20210706164248362"}}),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164252185.png",alt:"image-20210706164252185"}})]),t._v(" "),s("p",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164300727.png",alt:"image-20210706164300727"}}),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706164311658.png",alt:"image-20210706164311658"}})]),t._v(" "),s("h4",{attrs:{id:"时间空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间空间复杂度"}},[t._v("#")]),t._v(" "),s("strong",[t._v("时间空间复杂度：")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("By simply stored (v) in the  vth array.")]),t._v("\nRelax (Decrease-Key):"),s("strong",[t._v("O(1)")]),t._v("\nPick vertex (Extract-Min):"),s("strong",[t._v("O(V)")]),t._v(" "),s("strong",[t._v("Running Time:")]),t._v("\nThe cost of |V| operation Extract-Min is O(|V|2)\nAt most O(|E|) Decrease-Key\nTotal Time: "),s("strong",[t._v("O(|E| + |V|2) = O(|V|2)")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("By using binary Heap 二叉堆")]),t._v("\nRelax —— Decrease-Key: "),s("strong",[t._v("O(log |V|)")]),t._v("\nPick vertex —— Extract-Min: "),s("strong",[t._v("O (log |V|)")]),t._v(" "),s("strong",[t._v("RunningTime:")]),t._v("\nThe cost of |V| operation Extract-Min is O(|V| log |V|)\nAt most O(|E|) Decrease-Key\nTotal Time: "),s("strong",[t._v("O((|E| + |V|) log |V|) = O(|E| log |V|)")])])])]),t._v(" "),s("h4",{attrs:{id:"路径非负"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径非负"}},[t._v("#")]),t._v(" "),s("strong",[t._v("路径非负！")])]),t._v(" "),s("p",[t._v("Shortest path algorithms like Dijkstra's Algorithm that aren't able to detect such a cycle can give an incorrect result because they can go through a negative weight cycle and reduce the path length.")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706165556399.png",alt:"image-20210706165556399"}}),t._v(" "),s("h3",{attrs:{id:"floyd-warshall-algorithm-弗洛伊德算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floyd-warshall-algorithm-弗洛伊德算法"}},[t._v("#")]),t._v(" Floyd-Warshall Algorithm 弗洛伊德算法")]),t._v(" "),s("p",[t._v("间复杂度: "),s("strong",[s("em",[t._v("O")]),t._v("（n^3）")]),t._v("; 空间复杂度: "),s("strong",[s("em",[t._v("O")]),t._v("（n^2）")])]),t._v(" "),s("p",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706172148628.png",alt:"image-20210706172148628"}}),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706172218170.png",alt:"image-20210706172218170"}}),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706172252258.png",alt:"image-20210706172252258"}})]),t._v(" "),s("p",[t._v("同样不适用有negative weight cycle的情况")]),t._v(" "),s("p",[t._v("Preparation – Node Pair Matrix NxN矩阵，逐步分析Indirect Paths "),s("strong",[t._v("via 经过")]),t._v(" Intermediate Node A/B/C/D.....")]),t._v(" "),s("h4",{attrs:{id:"code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" Code")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);