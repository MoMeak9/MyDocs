(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{705:function(e,t,v){"use strict";v.r(t);var _=v(5),i=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"l20-np-问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#l20-np-问题"}},[e._v("#")]),e._v(" L20 NP 问题")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("P:")]),e._v(" the class of problems which can be solved by a deterministic "),v("strong",[e._v("polynomial algorithm.")]),e._v(" 能用确定性多项式算法解决的一类问题。")]),e._v(" "),v("li",[v("strong",[e._v("NP :")]),e._v(" the class of decision problem which can be solved by a "),v("strong",[e._v("non-deterministic polynomial algorithm.")]),e._v(" 一类可以用非确定性多项式算法求解的决策问题。")]),e._v(" "),v("li",[v("strong",[e._v("NP-hard:")]),e._v(" the class of problems to which every NP problem reduces. 每一个NP问题都归结到的一类问题。")]),e._v(" "),v("li",[v("strong",[e._v("NP-complete (NPC):")]),e._v(" the class of problems which are NP-hard and belong to NP. NP-hard的一类问题，且属于NP。")])]),e._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706173148252.png",alt:"image-20210706173148252"}}),e._v(" "),v("h3",{attrs:{id:"p-np"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p-np"}},[e._v("#")]),e._v(" P = NP?")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Theorem.")]),e._v(" "),v("ul",[v("li",[e._v("Suppose "),v("em",[e._v("Y")]),e._v(" ∈ "),v("strong",[e._v("NP")]),e._v("-complete. Then "),v("em",[e._v("Y")]),e._v(" ∈ "),v("strong",[e._v("P")]),e._v(" if and only if "),v("strong",[e._v("P = NP")]),e._v(".")])])]),e._v(" "),v("li",[v("p",[e._v("Pf. ⇐")]),e._v(" "),v("ul",[v("li",[e._v("If "),v("strong",[e._v("P = NP")]),e._v(", then "),v("em",[e._v("Y")]),e._v(" ∈ "),v("strong",[e._v("P")]),e._v(" because "),v("em",[e._v("Y")]),e._v(" ∈ "),v("strong",[e._v("NP")]),e._v(".")])])]),e._v(" "),v("li",[v("p",[e._v("Pf. ⇒")]),e._v(" "),v("ul",[v("li",[e._v("Suppose "),v("em",[e._v("Y")]),e._v(" ∈ "),v("strong",[e._v("P")]),e._v(".")]),e._v(" "),v("li",[e._v("Consider any problem "),v("em",[e._v("X")]),e._v(" ∈ "),v("strong",[e._v("NP")]),e._v(".")]),e._v(" "),v("li",[e._v("Since "),v("em",[e._v("X")]),e._v(" ≤"),v("em",[e._v("p")]),e._v(" "),v("em",[e._v("Y")]),e._v(", we have "),v("em",[e._v("X")]),e._v(" ∈ "),v("strong",[e._v("P")]),e._v(".")]),e._v(" "),v("li",[e._v("This implies "),v("strong",[e._v("NP")]),e._v(" ⊆ "),v("strong",[e._v("P")]),e._v(".")]),e._v(" "),v("li",[e._v("We already know "),v("strong",[e._v("P")]),e._v(" ⊆ "),v("strong",[e._v("NP")]),e._v(". Thus "),v("strong",[e._v("P = NP")]),e._v(".")])])])]),e._v(" "),v("h3",{attrs:{id:"p-np-and-exp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p-np-and-exp"}},[e._v("#")]),e._v(" P, NP, and EXP")]),e._v(" "),v("p",[v("strong",[e._v("P.")]),e._v(" Decision problems for which there is a poly-time algorithm.")]),e._v(" "),v("p",[v("strong",[e._v("NP.")]),e._v(" Decision problems for which there is a poly-time certifier.")]),e._v(" "),v("p",[v("strong",[e._v("EXP.")]),e._v(" Decision problems for which there is an exponential-time algorithm.")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Claim. NP ⊆ EXP.")])]),e._v(" "),v("p",[e._v("Pf.")]),e._v(" "),v("ul",[v("li",[e._v("Consider any problem "),v("em",[e._v("X")]),e._v(" ∈ "),v("strong",[e._v("NP")]),e._v(".")]),e._v(" "),v("li",[e._v("By definition, there exists a poly-time certifier "),v("em",[e._v("C")]),e._v("("),v("em",[e._v("s")]),e._v(", "),v("em",[e._v("t")]),e._v(") for "),v("em",[e._v("X")]),e._v(".")]),e._v(" "),v("li",[e._v("To solve input "),v("em",[e._v("s")]),e._v(", run "),v("em",[e._v("C")]),e._v("("),v("em",[e._v("s")]),e._v(", "),v("em",[e._v("t")]),e._v(") on all strings "),v("em",[e._v("t")]),e._v(" with |"),v("em",[e._v("t")]),e._v("| ≤ "),v("em",[e._v("p")]),e._v("(|"),v("em",[e._v("s")]),e._v("|).")]),e._v(" "),v("li",[e._v("Return "),v("em",[e._v("yes")]),e._v(" if "),v("em",[e._v("C")]),e._v("("),v("em",[e._v("s")]),e._v(", "),v("em",[e._v("t")]),e._v(") returns "),v("em",[e._v("yes")]),e._v(" for any of these potential certificates.")]),e._v(" "),v("li",[e._v("Remark. Time-hierarchy theorem implies "),v("strong",[e._v("P")]),e._v(" ⊊ "),v("strong",[e._v("EXP")]),e._v(".")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Claim. P ⊆ NP. ！！")])]),e._v(" "),v("p",[e._v("Pf.")]),e._v(" "),v("ul",[v("li",[e._v("Consider any problem "),v("em",[e._v("X")]),e._v(" ∈ "),v("strong",[e._v("P")]),e._v(".")]),e._v(" "),v("li",[e._v("By definition, there exists a poly-time algorithm "),v("em",[e._v("A")]),e._v("("),v("em",[e._v("s")]),e._v(") that solves "),v("em",[e._v("X")]),e._v(".")]),e._v(" "),v("li",[e._v("Certificate "),v("em",[e._v("t")]),e._v(" = ε, certifier "),v("em",[e._v("C")]),e._v("("),v("em",[e._v("s")]),e._v(", "),v("em",[e._v("t")]),e._v(") = "),v("em",[e._v("A")]),e._v("("),v("em",[e._v("s")]),e._v(").")])])])]),e._v(" "),v("h3",{attrs:{id:"证明例题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#证明例题"}},[e._v("#")]),e._v(" 证明例题")]),e._v(" "),v("h4",{attrs:{id:"certifiers-and-certificates-3-satisfiability"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#certifiers-and-certificates-3-satisfiability"}},[e._v("#")]),e._v(" Certifiers and certificates: 3-satisfiability")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("3-SAT.")]),e._v(" Given a CNF formula Φ, is there a satisfying assignment?\n"),v("strong",[e._v("Certificate.")]),e._v(" An assignment of truth values to the n boolean variables.\n"),v("strong",[e._v("Certifier.")]),e._v(" Check that each clause in Φ has at least one true literal.\n"),v("strong",[e._v("Example.")]),e._v(" "),v("strong",[e._v("instances")]),e._v(" Φ =(x1∨x2∨x3) ∧ (x1∨x2∨x3) ∧ (x1∨x2∨x4)\n"),v("strong",[e._v("certificate")]),e._v(" t x1 = true, x2 = true, x3 = false, x4 = false")])]),e._v(" "),v("p",[v("strong",[e._v("Conclusion. 3-SAT ∈ NP.")])]),e._v(" "),v("h4",{attrs:{id:"certifiers-and-certificates-hamilton-path"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#certifiers-and-certificates-hamilton-path"}},[e._v("#")]),e._v(" Certifiers and certificates: Hamilton path")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("HAM-PATH")]),e._v(". Given an undirected graph G = (V, E), does there exist a simple path P that visits every node?\n"),v("strong",[e._v("Certificate")]),e._v(". A permutation of the n nodes.\n"),v("strong",[e._v("Certifier")]),e._v(". Check that the permutation contains each node in V exactly once, and that there is an edge between each pair of adjacent nodes.")])]),e._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"images/image-20210706174804411.png",alt:"image-20210706174804411"}}),e._v(" "),v("p",[v("strong",[e._v("Conclusion. HAM-PATH ∈ NP.")])])])}),[],!1,null,null,null);t.default=i.exports}}]);