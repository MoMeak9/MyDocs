(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{684:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("说明：javaScript在笔试题中只有一两题，基本都在与面试官沟通的时候考察，这是考察基础的重点，如果回答不好回给人印象基础不牢固， 只会用的印象，所以要牢牢掌握下面的考点。")])]),t._v(" "),a("h2",{attrs:{id:"考点-1-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-1-数据类型"}},[t._v("#")]),t._v(" 考点 1：数据类型")]),t._v(" "),a("p",[a("strong",[t._v("问题：虚拟Dom 与 diff算法")])]),t._v(" "),a("p",[a("code",[t._v("虚拟DOM")]),t._v("是一个"),a("code",[t._v("对象")]),t._v("，一个什么样的对象呢？"),a("strong",[t._v("一个用来表示真实DOM的对象")])]),t._v(" "),a("p",[a("strong",[t._v("Diff算法是一种对比算法")]),t._v("。对比两者是"),a("code",[t._v("旧虚拟DOM和新虚拟DOM")]),t._v("，对比出是哪个"),a("code",[t._v("虚拟节点")]),t._v("更改了，找出这个"),a("code",[t._v("虚拟节点")]),t._v("，并只更新这个虚拟节点所对应的"),a("code",[t._v("真实节点")]),t._v("，而不用更新其他数据没发生改变的节点，实现"),a("code",[t._v("精准")]),t._v("地更新真实DOM，进而"),a("code",[t._v("提高效率")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("问题：JS是如何编译运行的？")])]),t._v(" "),a("p",[t._v("JavaScript 是一个解释型语言；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43fa021495db43e49730ba3e7274fb58~tplv-k3u1fbpfcp-watermark.awebp",alt:"img"}})]),t._v(" "),a("p",[t._v("有的同学可能已经知道，Js 是通过 Js 引擎运行起来的；")]),t._v(" "),a("p",[t._v("Js 引擎有很多种，比如 Chrome 使用的 V8 引擎，Webkit 使用的是 JavaScriptCore，React Native 使用的是 Hermes。今天我们主要来分析一下比较主流的 V8 引擎是怎样运行 Js 的。")]),t._v(" "),a("p",[a("strong",[t._v("问题：JavaScript 有几种数据类型，分别是什么？")])]),t._v(" "),a("p",[t._v("有 7 种：\n"),a("strong",[t._v("string")]),t._v(" 字符串类型"),a("strong",[t._v("number")]),t._v(" 数字类型"),a("strong",[t._v("object")]),t._v(" 对象类型"),a("strong",[t._v("boolean")]),t._v(" 布尔值类型"),a("strong",[t._v("null")]),t._v(" 空值"),a("strong",[t._v("undefined")]),t._v(" 未定义\n其中 ES6 还新增了一种："),a("strong",[t._v("Symbol")]),t._v(" 类型，用于创建一个独一无二的值。")]),t._v(" "),a("p",[a("strong",[t._v("问题：判断数据类型的方式有那些")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("typeof")]),t._v(" "),a("p",[t._v("对于基本类型，除 null 以外，均可以返回正确的结果。")]),t._v(" "),a("p",[t._v("对于引用类型，除 function 以外，一律返回 object 类型。对于 null ，返回 object 类型。")]),t._v(" "),a("p",[t._v("对于 function 返回 function 类型。")])]),t._v(" "),a("li",[a("p",[t._v("instanceOf")])]),t._v(" "),a("li",[a("p",[t._v("Constructor")])]),t._v(" "),a("li",[a("p",[t._v("Object.prototype.toString.call")])])]),t._v(" "),a("p",[t._v("链接：https://juejin.cn/post/6919805736734162952")]),t._v(" "),a("p",[a("strong",[t._v("问题：promis.all 与 race 区别？")])]),t._v(" "),a("p",[a("strong",[a("code",[t._v("promise.race")]),t._v("方法")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("race")]),t._v("方法同"),a("code",[t._v("all")]),t._v("方法类似，同样是处理异步并发问题，不同的是"),a("code",[t._v("race")]),t._v("方法中只要有执行结束就进入回调，不管结果本身是成功状态还是失败状态。")]),t._v(" "),a("li",[a("code",[t._v("promise.race")]),t._v("接收一个数组作为参数，包括"),a("strong",[t._v("普通值")]),t._v("和"),a("code",[t._v("**promise**")]),a("strong",[t._v("对象")]),t._v("，执行结果就是哪个先执行完，哪个先进回调。")]),t._v(" "),a("li",[a("code",[t._v("promise.race")]),t._v("方法的返回值也是一个"),a("code",[t._v("promise")]),t._v("对象，所以可以在"),a("code",[t._v("promise.race")]),t._v("后使用"),a("code",[t._v("then")]),t._v("方法。")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("promise.race")]),t._v("的方式调用，所以"),a("code",[t._v("race")]),t._v("方法是一个静态方法。")])]),t._v(" "),a("p",[a("strong",[t._v("问题：null 和undefined 有什么区别？")])]),t._v(" "),a("p",[a("u",[t._v("undefined：表示变量声明过但并未赋过值，它是所有未赋值变量默认值；")]),t._v(" "),a("u",[t._v("null：主动释放一个变量引用的对象，")]),t._v("表示一个变量不再指向任何对象地址。 当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。")]),t._v(" "),a("p",[a("strong",[t._v("问题：列举三种强制类型转换和两种隐式类型转换？")])]),t._v(" "),a("p",[a("strong",[t._v("强制类型转换：")]),t._v('\nNumber("10") 转换为 number 类型')]),t._v(" "),a("p",[t._v('parseInt("20.5") 转换为number 取整')]),t._v(" "),a("p",[t._v('parseFloat("10.5") 转换为number 保留小数')]),t._v(" "),a("p",[t._v("String(10) 转换为 string 类型")]),t._v(" "),a("p",[t._v("Boolean(1) 转换为 Boolean 类型")]),t._v(" "),a("p",[a("strong",[t._v("隐式类型转换：")])]),t._v(" "),a("ol",[a("li",[t._v('四则运算转换：\n加法运算符+是双目运算符，只要其中一个是 string 类型，表达式的值便是一个String。对于其他的四则运算，只要其中一个是 Number 类型，表达式的便是一个 Number。\n比如：\n"10"+20，加号遇到字符串变成连接符，20 隐式转换为字符串；1+true， true 隐式转换为 1；')]),t._v(" "),a("li",[t._v('判断语句转换：\n判断语句中的判断条件需要是 Boolean 类型，所以条件表达式会被隐式转换为Boolean。其转换规则则同Boolean 的构造函数。比如:\n10 == "10"，"10"隐式转换为 10')])]),t._v(" "),a("h2",{attrs:{id:"考点-2-传值-vs-传址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-2-传值-vs-传址"}},[t._v("#")]),t._v(" 考点 2：传值 VS 传址")]),t._v(" "),a("p",[a("strong",[t._v("问题：阅读下面代码，说说运行的结果")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码 1： ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码 2：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("代码 1 运行的结果是：1 3；")]),t._v(" "),a("p",[t._v("理由：基本类型的值是通过值复制的方式来赋值或是传递的，所以这里 b 的改变不会影响a 的。基本类型包括有 null、undefined、string、number、boolean 以及ES6 中的symbol。")]),t._v(" "),a("p",[t._v('代码 2 运行的结果是：{name:"Hi"}    {name:"Hi"}；')]),t._v(" "),a("p",[t._v("理由："),a("u",[t._v("引用类型赋值并不会真正重新拷贝引用值，而是拷贝引用的地址，也就是传址。c 与 d 是引用同一个地址。所以如果修改了 c，d 的值也会被修改。")])]),t._v(" "),a("p",[t._v("引用类型包括有数组、对象、函数等。")]),t._v(" "),a("h2",{attrs:{id:"考点-3-作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-3-作用域"}},[t._v("#")]),t._v(" 考点 3：作用域")]),t._v(" "),a("p",[a("strong",[t._v("问题：变量提升")])]),t._v(" "),a("p",[t._v("可以在变量和函数声明之前使用它们。就好像是变量声明和函数声明被"),a("strong",[t._v("提升")]),t._v("了代码的顶部一样")]),t._v(" "),a("p",[t._v("JS作为解释语言在编译阶段阶段会检测到所有的变量和函数声明并放入内存")]),t._v(" "),a("p",[t._v("所有的声明（function, var, let, const, class）都会被“提升”。但是只有使用"),a("code",[t._v("var")]),t._v("关键字声明的变量才会被初始化"),a("code",[t._v("undefined")]),t._v("值，而"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("声明的变量则不会被初始化值。")]),t._v(" "),a("p",[a("strong",[t._v("问题：执行以下代码的结果是什么？为什么？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这段代码的执行结果是 undefined 和 2。")]),t._v(" "),a("p",[t._v("原因是："),a("u",[t._v("变量和函数都被提升到了函数体的顶部")]),t._v("。因此，当打印变量 a 时，它虽存在于函数体（因为 a 已经被声明），但仍然是 undefined。函数 foo 执行后得到的结果是 2（函数内容完整）。")]),t._v(" "),a("p",[t._v("此题考察是的变量提升的知识点，"),a("u",[t._v("变量提升：可以理解为把变量声明提升到当前执行环境的最顶端。")])]),t._v(" "),a("p",[a("strong",[t._v("问题：说说你对作用域链的理解？")])]),t._v(" "),a("p",[t._v("当所需要的变量，在所在的作用域中查找不到的时候，它会一层一层向上查找，直到找到全局作用域还没有找到的时候，就会放弃查找。这种一层一层的关系，就是作用域链。")]),t._v(" "),a("p",[a("strong",[t._v("执行以下代码的结果是什么？为什么？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这段代码的执行结果是：1 和 报错 b is not defined。")]),t._v(" "),a("p",[t._v('当作用域内找不到 a，会向上一层一层查找，最后找到了全局下的 a,输出结果为 1。同理，向上一层一层查找，最后找不到 b，所以输出"Uncaught ReferenceError: b is not defined"。')]),t._v(" "),a("p",[t._v("此题考察是的作用域和作用域链的知识点。")]),t._v(" "),a("h2",{attrs:{id:"考点-4-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-4-闭包"}},[t._v("#")]),t._v(" 考点 4：闭包")]),t._v(" "),a("p",[a("strong",[t._v("问题：请讲一下你对闭包的认识和理解。")])]),t._v(" "),a("p",[t._v("闭包是："),a("strong",[t._v("指有权访问另一个函数作用域中的变量的"),a("u",[t._v("函数")])]),t._v("； 稍微详细一点的回答：")]),t._v(" "),a("p",[t._v("在 js 中变量的作用域属于函数作用域, 在函数执行完后，作用域就会被清理，内存也会随之被回收。但是由于闭包函数是建立在函数内部的子函数, 由于它可以访问上级作用域，即使上级函数执行完, 作用域也不会随之销毁,。")]),t._v(" "),a("p",[t._v("这时的子函数（也就是闭包），"),a("strong",[t._v("便拥有了访问上级作用域中变量的权限，即使上级函数执行完后作用域内的值也不会被销毁")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"考点-5-原型链和继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-5-原型链和继承"}},[t._v("#")]),t._v(" 考点 5：原型链和继承")]),t._v(" "),a("p",[a("strong",[t._v("问题：说一下你的原型链和原型链继承的理解")])]),t._v(" "),a("p",[t._v("原型链："),a("strong",[t._v("当对象查找一个属性（方法）的时候")]),t._v("，如果没有在自身找到，那么就会查找自身的原型，如果原型还没有找到，那么会继续查找原型的原型，直到找到 Object.prototype 的原型时，此时原型为 null，查找停止。")]),t._v(" "),a("p",[t._v("这种通过通过原型链接的逐级向上的查找链被称为原型链。")]),t._v(" "),a("p",[t._v("原型链继承：一个对象可以使用另外一个对象的属性或者方法，就称之为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。")]),t._v(" "),a("p",[a("strong",[t._v("问题：ES6 之前是如何使用 prototype 实现继承的？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myName")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承属性，通过借用构造函数调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" label")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承方法，创建备份")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须设置回正确的构造函数，要不然在会发生判断类型出错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myLabel")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"考点-6-bom-与-dom-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-6-bom-与-dom-操作"}},[t._v("#")]),t._v(" 考点 6：BOM 与 DOM 操作")]),t._v(" "),a("p",[a("strong",[t._v("问题：什么是 BOM？什么是 DOM？")])]),t._v(" "),a("p",[t._v("BOM 是即"),a("strong",[t._v("浏览器对象模型")]),t._v("。 "),a("strong",[t._v("BOM 提供了独立于内容，与浏览器窗口进行交互的对象")]),t._v("； 由于 BOM 主要用于管理窗口与窗口之间的通讯，因此其核心对象是 "),a("strong",[t._v("window")]),t._v("； BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性；")]),t._v(" "),a("p",[t._v("DOM 是"),a("strong",[t._v("文档对象模型")]),t._v("。利用 DOM 我们可以操作 HTML 中的元素，使得网页被下载到浏览器后，开发者可以根据需求进行页面内容的修改。")]),t._v(" "),a("p",[a("strong",[t._v("问题：说出几个你比较常用的 BOM 对象和方法？")])]),t._v(" "),a("p",[a("strong",[t._v("window 对象，是 JS 的最顶层对象，其他的 BOM 对象都是 window 对象的属性；")])]),t._v(" "),a("p",[a("strong",[t._v("document 对象，文档对象；")])]),t._v(" "),a("p",[t._v("location 对象，浏览器当前 URL 信息；")]),t._v(" "),a("p",[t._v("navigator 对象，浏览器本身信息；")]),t._v(" "),a("p",[t._v("screen 对象，客户端屏幕信息；")]),t._v(" "),a("p",[a("strong",[t._v("history 对象，浏览器访问历史信息；")])]),t._v(" "),a("p",[t._v("常用的方法：")]),t._v(" "),a("p",[a("strong",[t._v("window.alert('提示信息')")])]),t._v(" "),a("p",[t._v('window.confirm("确认信息")')]),t._v(" "),a("p",[t._v('window.prompt("弹出输入框")')]),t._v(" "),a("p",[a("strong",[t._v('window.open("url 地址"，“打开的方式”，“新窗口的大小”）')])]),t._v(" "),a("p",[a("strong",[t._v("window.close() 关闭当前的网页")])]),t._v(" "),a("p",[t._v("window.moveTo() - 移动当前窗口")]),t._v(" "),a("p",[t._v("window.resizeTo() - 调整当前窗口的尺寸")]),t._v(" "),a("p",[a("strong",[t._v("window.setTimeout(函数，时间) 只执行一次")])]),t._v(" "),a("p",[a("strong",[t._v("window.setInterval(函数，时间) 无限执行")])]),t._v(" "),a("h2",{attrs:{id:"考点-7-ajax-与-跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-7-ajax-与-跨域"}},[t._v("#")]),t._v(" 考点 7：Ajax 与 跨域")]),t._v(" "),a("p",[a("strong",[t._v("问题：原生 js ajax 请求有几个步骤？分别是什么？")])]),t._v(" "),a("p",[t._v("一共有 5 个步骤，如下：")]),t._v(" "),a("ol",[a("li",[t._v("创建XML对象")]),t._v(" "),a("li",[t._v("确定请求类型以及是否异步处理")]),t._v(" "),a("li",[t._v("设置内容编码类型")]),t._v(" "),a("li",[t._v("发生请求")]),t._v(" "),a("li",[t._v("接受响应数据")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.创建 XMLHttpRequest 对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ajax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 规定请求的类型、URL 以及是否异步处理请求。   ")]),t._v("\najax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 发送信息至服务器时内容编码类型")]),t._v("\najax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application/x-www-form-urlencoded"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4. 发送请求ajax.send(null);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5. 接受服务器响应数据")]),t._v("\najax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("问题：什么情况造成跨域？")])]),t._v(" "),a("p",[t._v("同源策略限制，不同源会造成跨域。以下任意一种情况不同，都是不同源。")]),t._v(" "),a("p",[t._v("同源："),a("strong",[t._v("1. 协议；2.域名；3.端口号")]),t._v("三者要求全部相同，只要有一个不相同就是非同源策略。")]),t._v(" "),a("p",[a("strong",[t._v("问题：跨域解决方案有哪些？")])]),t._v(" "),a("ol",[a("li",[t._v("JSONP")]),t._v(" "),a("li",[t._v("ifarme")]),t._v(" "),a("li",[t._v("CORS")]),t._v(" "),a("li",[t._v("Nginx反向代理")])]),t._v(" "),a("p",[a("strong",[t._v("问题：请解释 JSONP 的工作原理？")])]),t._v(" "),a("p",[t._v("JSONP 是一个简单高效的跨域方式，利用的是"),a("strong",[t._v("HTML 中的 script 标签可以加载并执行其他域的 javascript")]),t._v("，于是我们可以通过 script 标记来动态加载其他域的资源。")]),t._v(" "),a("p",[t._v("例如我要从域A 的页面 pageA 加载域 B 的数据，那么在域 B 的页面 pageB 中我以 JavaScript 的形式声明pageA 需要的数据，然后在 pageA 中用 script 标签把 pageB 加载进来，那么 pageB 中的脚本就会得以执行。")]),t._v(" "),a("p",[t._v("JSONP 在此基础上加入了回调函数，pageB 加载完之后会执行 pageA 中定义的函数，所需要的数据会以参数的形式传递给该函数。")]),t._v(" "),a("p",[t._v("JSONP 易于实现，但是也会存在一些安全隐患，如果第三方的脚本随意地执行，那么它就可以篡改页面内容，截获敏感数据。但是在受信任的双方传递数据，JSONP 是非常合适的选择。")]),t._v(" "),a("h2",{attrs:{id:"考点-8-事件模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-8-事件模型"}},[t._v("#")]),t._v(" 考点 8：事件模型")]),t._v(" "),a("p",[a("strong",[t._v("问题：请说说什么是事件流？")])]),t._v(" "),a("p",[t._v("事件是文档或者浏览器窗口中发生的，特定的交互瞬间。")]),t._v(" "),a("p",[t._v("而事件流，"),a("strong",[t._v("描述的是从页面中接收事件的顺序")]),t._v("。")]),t._v(" "),a("p",[t._v("但有意思的是，IE和Netscape开发团队居然提出了两个截然相反的事件流概念。")]),t._v(" "),a("p",[t._v("1、IE的事件流是 事件冒泡流，")]),t._v(" "),a("p",[t._v("2、标准的浏览器事件流是 事件捕获流。")]),t._v(" "),a("p",[t._v("不过addEventLister给出了第三个参数同时支持冒泡与捕获")]),t._v(" "),a("p",[a("strong",[t._v("问题：什么是事件冒泡？什么是事件捕获？")])]),t._v(" "),a("p",[t._v("事件捕获阶段：事件从"),a("u",[t._v("最上一级标签开始往下查找，直到捕获到事件目标(target)")]),t._v("。")]),t._v(" "),a("p",[t._v("事件冒泡阶段：事件从"),a("u",[t._v("事件目标(target)开始，往上冒泡直到页面的最上一级标签")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("问题：请说出阻止事件冒泡的几个办法？")])]),t._v(" "),a("ol",[a("li",[t._v("event.stopPropagation();\n事件处理过程中，阻止了事件冒泡，但"),a("strong",[t._v("不会阻击默认行为")]),t._v("，比如：点击事件绑定在 a 标签的话，会执行了超链接的跳转。")]),t._v(" "),a("li",[t._v("return false;\n事件处理过程中，"),a("strong",[t._v("阻止了事件冒泡，"),a("u",[t._v("也阻止了默认行为")])]),t._v("。比如：点击事件绑定在 a 标签的话，不会执行超链接的跳转。")])]),t._v(" "),a("h2",{attrs:{id:"考点-9-this-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-9-this-关键字"}},[t._v("#")]),t._v(" 考点 9：this 关键字")]),t._v(" "),a("p",[a("strong",[t._v("问题：this指向的几种情况？")])]),t._v(" "),a("ul",[a("li",[t._v("1、"),a("strong",[t._v("new操作符创建实例")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this指向当前person实例对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sunshine_Lin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("2、"),a("strong",[t._v("指向window")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器window，node里global")]),t._v("\n")])])]),a("ul",[a("li",[t._v("3、"),a("strong",[t._v("对象调用方法")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ntarget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// target 直接提供对象调用方法")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给对象调用方法赋值并调用，这种就是改变了this了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器window，node里global")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v("4、call、apply、bind改变this")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'林三心'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sunshin_Lin'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改变sayName的this指向obj2")]),t._v("\nobj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sunshin_Lin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改变sayName的this指向obj2")]),t._v("\nobj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sunshin_Lin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改变sayName的this指向obj2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sunshin_Lin")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v("5、箭头函数中的this")])])]),t._v(" "),a("ol",[a("li",[t._v("默认绑定外层this，"),a("strong",[a("u",[t._v("箭头函数会默认帮我们绑定外层this的值，所以在箭头函数中this的值和外层的this是一样的")]),t._v("。")])]),t._v(" "),a("li",[a("strong",[t._v("不能用call方法修改里面的this")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//打出来的是window")]),t._v("\n")])])]),a("p",[a("strong",[t._v("问题：执行以下代码的结果是什么？为什么？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("运行结果是 2，因为是 obj 调用的foo，所以 foo 的this 指向了obj，而 obj.a = 2。此题考察对 this 指向的理解。")]),t._v(" "),a("p",[a("strong",[t._v("问题：执行以下代码的结果是什么？为什么？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"windows-name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cherry"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("运行结果是 windows-name，"),a("strong",[t._v("因为 this 永远指向最后调用它的那个对象")]),t._v("，最后调用 a 的地方 a()；前面没有调用的对象。那么就是全局对象 window，这就相当于是 window.a()；注意，这里我们没有使用严格模式，如果使用严格模式的话，全局对象就是 undefined。此题考察对 this 指向的理解。")]),t._v(" "),a("h2",{attrs:{id:"考点-10-es6篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考点-10-es6篇"}},[t._v("#")]),t._v(" 考点 10：es6篇")]),t._v(" "),a("p",[a("strong",[t._v("问题：说说你知道那些es6特性（面试）")])]),t._v(" "),a("p",[t._v("es6地址https://es6.ruanyifeng.com/")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("let const")])]),t._v(" "),a("li",[a("p",[t._v("变量的解构赋值 {}")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" details "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("firstName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Code'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lastName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Burst'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" details"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Code")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 22")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("symbol")])]),t._v(" "),a("li",[a("p",[t._v("set和map的数据结构（set主要用于去重）")])]),t._v(" "),a("li",[a("p",[t._v("proxy（vue3的重点）")])]),t._v(" "),a("li",[a("p",[t._v("promise对象（如何实现，与async，await的区别）")])]),t._v(" "),a("li",[a("p",[t._v("async await（返回值是promise）")])]),t._v(" "),a("li",[a("p",[t._v("generator（react使用比较多）")])]),t._v(" "),a("li",[a("p",[t._v("class,class的继承（node，react主要使用）")])]),t._v(" "),a("li",[a("p",[t._v("... 展开运算符（扩展运算符）")])])]),t._v(" "),a("p",[t._v("主要看文档啃熟悉，与技术官面试才能游刃有余，可以先按上面的9点来啃熟悉，其他稳定里的可以认识就行，因为这9点是重点考察对象")]),t._v(" "),a("p",[a("strong",[t._v("问题：var、let、const之间的区别（笔试）")])]),t._v(" "),a("p",[t._v("var声明变量可以重复声明，而let不可以重复声明")]),t._v(" "),a("p",[t._v("var是不受限于块级的，而let是受限于块级")]),t._v(" "),a("p",[t._v("var会与window相映射（会挂一个属性），而let不与window相映射")]),t._v(" "),a("p",[t._v("var可以在声明的上面访问变量，而"),a("strong",[t._v("let有暂存死区")]),t._v("，在声明的上面访问变量会报错")]),t._v(" "),a("p",[t._v("const声明之后必须赋值，否则会报错")]),t._v(" "),a("p",[t._v("const定义不可变的量，改变了就会报错")]),t._v(" "),a("p",[t._v("const和let一样不会与window相映射、支持块级作用域、在声明的上面访问变量会报错")]),t._v(" "),a("p",[a("strong",[t._v("问题：介绍下 Set、Map的区别（比较少被问道，基本问的是set）")])]),t._v(" "),a("p",[t._v("应用场景Set用于数据重组，Map用于数据储存")]),t._v(" "),a("ol",[a("li",[t._v("Map是键值对，Set是值得集合，当然键和值可以是任何的值；")]),t._v(" "),a("li",[t._v("Map可以通过get方法获取值，而set不能因为它只有值；")]),t._v(" "),a("li",[t._v("都能通过"),a("strong",[t._v("迭代器")]),t._v("进行for...of遍历；")]),t._v(" "),a("li",[a("strong",[t._v("Set的值是唯一的可以做数组去重，Map由于没有格式限制，可以做数据存储；")])])]),t._v(" "),a("p",[a("strong",[t._v("问题：介绍下promise，有用过all方法吗？（重要，百分之90会问到，除非到不了这里就被pass）")])]),t._v(" "),a("p",[t._v("Promise 是异步编程的一种解决方案。Promise对象有以下两个特点，对象的状态不受外界影响和一旦状态改变，就不会再变，任何时候都可以得到这个结果，"),a("strong",[t._v("promise对象有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）")]),t._v("。Promise对象是一个构造函数，用来生成Promise实例，Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。"),a("strong",[t._v("promise的方法(有些人叫api)有then， catch，finally，resolve,reject")]),t._v("等。")]),t._v(" "),a("p",[t._v("**"),a("u",[t._v("Promise.all()方法可以将多个Promise实例包装成一个新的Promise实例")]),t._v("。**同时，"),a("strong",[t._v("成功和失败的返回值是不同的，成功的时候返回的是一个"),a("u",[t._v("结果数组")]),t._v("，而失败的时候则"),a("u",[t._v("返回最先被reject失败状态的值")])]),t._v("。")]),t._v(" "),a("p",[t._v("需要特别注意的是，Promise.all"),a("strong",[t._v("获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的")]),t._v("，即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。")]),t._v(" "),a("p",[a("strong",[t._v("问题：promise和async await的区别(用自己的话总结)")])]),t._v(" "),a("p",[t._v("Promise的出现解决了传统callback函数导致的“地域回调”问题，"),a("strong",[t._v("但它的语法导致了它向纵向发展行成了一个回调链")]),t._v("，遇到复杂的业务场景，这样的语法显然也是不美观的。而async await代码看起来会简洁些，使得异步代码看起来像同步代码，"),a("strong",[t._v("await的本质是可以提供等同于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。")])]),t._v(" "),a("p",[t._v("async await与Promise一样，是"),a("strong",[t._v("非阻塞")]),t._v("的。")]),t._v(" "),a("p",[a("strong",[t._v("async await是基于Promise实现的，可以说是改良版的Promise，它不能用于普通的回调函数")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("问题：如何去重？（重要，百分之70，要不笔试，要不面试的时候问）")])]),t._v(" "),a("p",[t._v("[...new set(arr)]")]),t._v(" "),a("p",[a("strong",[t._v("问题：for in 和for of的区别（面试）")])]),t._v(" "),a("p",[t._v("for...in 语句用于"),a("strong",[t._v("遍历数组或者对象的属性")]),t._v("（对数组或者对象的属性进行循环操作）。")]),t._v(" "),a("p",[t._v("for in得到对对象的"),a("strong",[t._v("key")]),t._v("或数组,字符串的"),a("strong",[t._v("下标")])]),t._v(" "),a("p",[a("strong",[t._v("for of和forEach一样")]),t._v(",是直接得到"),a("strong",[t._v("值")]),t._v("；"),a("strong",[t._v("for of不能对对象用")])]),t._v(" "),a("p",[a("strong",[t._v("问题：null和undefined的区别（笔试）")])]),t._v(" "),a("p",[t._v("总结来说：null表示没有对象，即该处不应该有值。undefined表示缺少值，即此处应该有值，但没有定义。")]),t._v(" "),a("p",[a("strong",[t._v("问题：操作数组，对象的常用方法有那些（重要）")])]),t._v(" "),a("p",[t._v("数组：")]),t._v(" "),a("ol",[a("li",[t._v("push() 向数组最里面推一个或多个数据")]),t._v(" "),a("li",[t._v("unshift()在数组的开头添加一个或多个数据")]),t._v(" "),a("li",[t._v("pop()在数据的尾部删除一个数据")]),t._v(" "),a("li",[t._v("shift()在数组的开头删除一个数据")]),t._v(" "),a("li",[t._v("splice() arr.splice(参数1,参数2,参数3,参数4,参数5,\t参数n)，参数1表示要删除的开始位置, 参数2表示删除的\n个数,参数3,参数4,参数5,\t参数n,表示在删除位置添加的字符")]),t._v(" "),a("li",[t._v("concat()把两个或多个数组连接成一个数组")]),t._v(" "),a("li",[t._v("sort()数组排序方法,默认是按照字符编码逐个字符进行排序")]),t._v(" "),a("li",[t._v("join()按照我们特定的方式（指定字符）把数组转化成字符串")]),t._v(" "),a("li",[t._v("split()把字符串转化成数组(按照指定的字符进行分割)")]),t._v(" "),a("li",[t._v("Array.isArray() 判断数据是否是数组")]),t._v(" "),a("li",[t._v("forEach() 用于遍历我们的数组,对数组中的每一个元素进行操作,没有返回值")]),t._v(" "),a("li",[t._v("Map()作用: 对数组进行遍历,进行某个操作,然后返回一个新的数组")]),t._v(" "),a("li",[t._v("filter() 作用: 用于进行过滤,筛选出符合条件的元素,组成一个新的数组返回")]),t._v(" "),a("li",[t._v("reduce()作用: 将前一项和后一项的值进行运算,返回累积的结果.")]),t._v(" "),a("li",[t._v("some()作用: 只要数组中的某一个元素符合指定的条件,就返回真,否则返回假,可以和逻辑运算符或(||)类比")]),t._v(" "),a("li",[t._v("find:用于查找某个元素,如果找不到undefined,findIndex:用于查找某个元素的索引,如果找不到就返回-1 对象：(面试直接问道对象的比较少，对于经常使用比如create，assign，freeze，is，keys要知道)")])]),t._v(" "),a("p",[a("strong",[t._v("问题：异步加载的方式有那些（重要，笔试，面试）")])]),t._v(" "),a("p",[t._v("数组：")]),t._v(" "),a("ol",[a("li",[t._v("Defer")]),t._v(" "),a("li",[t._v("HTML5为"),a("script")])])])}),[],!1,null,null,null);s.default=e.exports}}]);